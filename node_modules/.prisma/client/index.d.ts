
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Image
 * 
 */
export type Image = {
  imgId: string
  fileType: string
  fileSize: number
  dimensionX: number
  dimensionY: number
  purity: string
  category: string
  path: string
  url: string
  source: string
  colors: string
  desc: string
  createdTime: Date
  createAt: Date
  updateAt: Date
}

/**
 * Model ImageExt
 * 
 */
export type ImageExt = {
  imgId: string
  views: number
  favorites: number
  ratio: Prisma.Decimal
  createAt: Date
  updateAt: Date
}

/**
 * Model Author
 * 
 */
export type Author = {
  name: string
  id: string | null
  desc: string
  type: string
  createAt: Date
  updateAt: Date
}

/**
 * Model Tag
 * 
 */
export type Tag = {
  name: string
  alias: string | null
  id: string | null
  categoryId: string
  category: string
  createAt: Date
  updateAt: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Images
 * const images = await prisma.image.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Images
   * const images = await prisma.image.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.image`: Exposes CRUD operations for the **Image** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.image.findMany()
    * ```
    */
  get image(): Prisma.ImageDelegate<GlobalReject>;

  /**
   * `prisma.imageExt`: Exposes CRUD operations for the **ImageExt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ImageExts
    * const imageExts = await prisma.imageExt.findMany()
    * ```
    */
  get imageExt(): Prisma.ImageExtDelegate<GlobalReject>;

  /**
   * `prisma.author`: Exposes CRUD operations for the **Author** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Authors
    * const authors = await prisma.author.findMany()
    * ```
    */
  get author(): Prisma.AuthorDelegate<GlobalReject>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.10.0
   * Query Engine version: 73e60b76d394f8d37d8ebd1f8918c79029f0db86
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Image: 'Image',
    ImageExt: 'ImageExt',
    Author: 'Author',
    Tag: 'Tag'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ImageExtCountOutputType
   */


  export type ImageExtCountOutputType = {
    tag: number
  }

  export type ImageExtCountOutputTypeSelect = {
    tag?: boolean
  }

  export type ImageExtCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ImageExtCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ImageExtCountOutputType
    : S extends undefined
    ? never
    : S extends ImageExtCountOutputTypeArgs
    ?'include' extends U
    ? ImageExtCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ImageExtCountOutputType ? ImageExtCountOutputType[P] : never
  } 
    : ImageExtCountOutputType
  : ImageExtCountOutputType




  // Custom InputTypes

  /**
   * ImageExtCountOutputType without action
   */
  export type ImageExtCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ImageExtCountOutputType
     * 
    **/
    select?: ImageExtCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Image
   */


  export type AggregateImage = {
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  export type ImageAvgAggregateOutputType = {
    fileSize: number | null
    dimensionX: number | null
    dimensionY: number | null
  }

  export type ImageSumAggregateOutputType = {
    fileSize: number | null
    dimensionX: number | null
    dimensionY: number | null
  }

  export type ImageMinAggregateOutputType = {
    imgId: string | null
    fileType: string | null
    fileSize: number | null
    dimensionX: number | null
    dimensionY: number | null
    purity: string | null
    category: string | null
    path: string | null
    url: string | null
    source: string | null
    colors: string | null
    desc: string | null
    createdTime: Date | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type ImageMaxAggregateOutputType = {
    imgId: string | null
    fileType: string | null
    fileSize: number | null
    dimensionX: number | null
    dimensionY: number | null
    purity: string | null
    category: string | null
    path: string | null
    url: string | null
    source: string | null
    colors: string | null
    desc: string | null
    createdTime: Date | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type ImageCountAggregateOutputType = {
    imgId: number
    fileType: number
    fileSize: number
    dimensionX: number
    dimensionY: number
    purity: number
    category: number
    path: number
    url: number
    source: number
    colors: number
    desc: number
    createdTime: number
    createAt: number
    updateAt: number
    _all: number
  }


  export type ImageAvgAggregateInputType = {
    fileSize?: true
    dimensionX?: true
    dimensionY?: true
  }

  export type ImageSumAggregateInputType = {
    fileSize?: true
    dimensionX?: true
    dimensionY?: true
  }

  export type ImageMinAggregateInputType = {
    imgId?: true
    fileType?: true
    fileSize?: true
    dimensionX?: true
    dimensionY?: true
    purity?: true
    category?: true
    path?: true
    url?: true
    source?: true
    colors?: true
    desc?: true
    createdTime?: true
    createAt?: true
    updateAt?: true
  }

  export type ImageMaxAggregateInputType = {
    imgId?: true
    fileType?: true
    fileSize?: true
    dimensionX?: true
    dimensionY?: true
    purity?: true
    category?: true
    path?: true
    url?: true
    source?: true
    colors?: true
    desc?: true
    createdTime?: true
    createAt?: true
    updateAt?: true
  }

  export type ImageCountAggregateInputType = {
    imgId?: true
    fileType?: true
    fileSize?: true
    dimensionX?: true
    dimensionY?: true
    purity?: true
    category?: true
    path?: true
    url?: true
    source?: true
    colors?: true
    desc?: true
    createdTime?: true
    createAt?: true
    updateAt?: true
    _all?: true
  }

  export type ImageAggregateArgs = {
    /**
     * Filter which Image to aggregate.
     * 
    **/
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     * 
    **/
    orderBy?: Enumerable<ImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Images
    **/
    _count?: true | ImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageMaxAggregateInputType
  }

  export type GetImageAggregateType<T extends ImageAggregateArgs> = {
        [P in keyof T & keyof AggregateImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImage[P]>
      : GetScalarType<T[P], AggregateImage[P]>
  }




  export type ImageGroupByArgs = {
    where?: ImageWhereInput
    orderBy?: Enumerable<ImageOrderByWithAggregationInput>
    by: Array<ImageScalarFieldEnum>
    having?: ImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageCountAggregateInputType | true
    _avg?: ImageAvgAggregateInputType
    _sum?: ImageSumAggregateInputType
    _min?: ImageMinAggregateInputType
    _max?: ImageMaxAggregateInputType
  }


  export type ImageGroupByOutputType = {
    imgId: string
    fileType: string
    fileSize: number
    dimensionX: number
    dimensionY: number
    purity: string
    category: string
    path: string
    url: string
    source: string
    colors: string
    desc: string
    createdTime: Date
    createAt: Date
    updateAt: Date
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  type GetImageGroupByPayload<T extends ImageGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageGroupByOutputType[P]>
            : GetScalarType<T[P], ImageGroupByOutputType[P]>
        }
      >
    >


  export type ImageSelect = {
    imgId?: boolean
    fileType?: boolean
    fileSize?: boolean
    dimensionX?: boolean
    dimensionY?: boolean
    purity?: boolean
    category?: boolean
    path?: boolean
    url?: boolean
    source?: boolean
    colors?: boolean
    desc?: boolean
    createdTime?: boolean
    createAt?: boolean
    updateAt?: boolean
    imageExt?: boolean | ImageExtArgs
  }

  export type ImageInclude = {
    imageExt?: boolean | ImageExtArgs
  }

  export type ImageGetPayload<
    S extends boolean | null | undefined | ImageArgs,
    U = keyof S
      > = S extends true
        ? Image
    : S extends undefined
    ? never
    : S extends ImageArgs | ImageFindManyArgs
    ?'include' extends U
    ? Image  & {
    [P in TrueKeys<S['include']>]:
        P extends 'imageExt' ? ImageExtGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'imageExt' ? ImageExtGetPayload<S['select'][P]> | null :  P extends keyof Image ? Image[P] : never
  } 
    : Image
  : Image


  type ImageCountArgs = Merge<
    Omit<ImageFindManyArgs, 'select' | 'include'> & {
      select?: ImageCountAggregateInputType | true
    }
  >

  export interface ImageDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Image that matches the filter.
     * @param {ImageFindUniqueArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ImageFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ImageFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Image'> extends True ? CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>> : CheckSelect<T, Prisma__ImageClient<Image | null >, Prisma__ImageClient<ImageGetPayload<T> | null >>

    /**
     * Find the first Image that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ImageFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ImageFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Image'> extends True ? CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>> : CheckSelect<T, Prisma__ImageClient<Image | null >, Prisma__ImageClient<ImageGetPayload<T> | null >>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.image.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.image.findMany({ take: 10 })
     * 
     * // Only select the `imgId`
     * const imageWithImgIdOnly = await prisma.image.findMany({ select: { imgId: true } })
     * 
    **/
    findMany<T extends ImageFindManyArgs>(
      args?: SelectSubset<T, ImageFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Image>>, PrismaPromise<Array<ImageGetPayload<T>>>>

    /**
     * Create a Image.
     * @param {ImageCreateArgs} args - Arguments to create a Image.
     * @example
     * // Create one Image
     * const Image = await prisma.image.create({
     *   data: {
     *     // ... data to create a Image
     *   }
     * })
     * 
    **/
    create<T extends ImageCreateArgs>(
      args: SelectSubset<T, ImageCreateArgs>
    ): CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>>

    /**
     * Delete a Image.
     * @param {ImageDeleteArgs} args - Arguments to delete one Image.
     * @example
     * // Delete one Image
     * const Image = await prisma.image.delete({
     *   where: {
     *     // ... filter to delete one Image
     *   }
     * })
     * 
    **/
    delete<T extends ImageDeleteArgs>(
      args: SelectSubset<T, ImageDeleteArgs>
    ): CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>>

    /**
     * Update one Image.
     * @param {ImageUpdateArgs} args - Arguments to update one Image.
     * @example
     * // Update one Image
     * const image = await prisma.image.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ImageUpdateArgs>(
      args: SelectSubset<T, ImageUpdateArgs>
    ): CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>>

    /**
     * Delete zero or more Images.
     * @param {ImageDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.image.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ImageDeleteManyArgs>(
      args?: SelectSubset<T, ImageDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ImageUpdateManyArgs>(
      args: SelectSubset<T, ImageUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Image.
     * @param {ImageUpsertArgs} args - Arguments to update or create a Image.
     * @example
     * // Update or create a Image
     * const image = await prisma.image.upsert({
     *   create: {
     *     // ... data to create a Image
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Image we want to update
     *   }
     * })
    **/
    upsert<T extends ImageUpsertArgs>(
      args: SelectSubset<T, ImageUpsertArgs>
    ): CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>>

    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.image.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends ImageCountArgs>(
      args?: Subset<T, ImageCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageAggregateArgs>(args: Subset<T, ImageAggregateArgs>): PrismaPromise<GetImageAggregateType<T>>

    /**
     * Group by Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImageGroupByArgs['orderBy'] }
        : { orderBy?: ImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Image.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ImageClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    imageExt<T extends ImageExtArgs = {}>(args?: Subset<T, ImageExtArgs>): CheckSelect<T, Prisma__ImageExtClient<ImageExt | null >, Prisma__ImageExtClient<ImageExtGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Image findUnique
   */
  export type ImageFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * Throw an Error if a Image can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Image to fetch.
     * 
    **/
    where: ImageWhereUniqueInput
  }


  /**
   * Image findFirst
   */
  export type ImageFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * Throw an Error if a Image can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Image to fetch.
     * 
    **/
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     * 
    **/
    orderBy?: Enumerable<ImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     * 
    **/
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     * 
    **/
    distinct?: Enumerable<ImageScalarFieldEnum>
  }


  /**
   * Image findMany
   */
  export type ImageFindManyArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * Filter, which Images to fetch.
     * 
    **/
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     * 
    **/
    orderBy?: Enumerable<ImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Images.
     * 
    **/
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ImageScalarFieldEnum>
  }


  /**
   * Image create
   */
  export type ImageCreateArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * The data needed to create a Image.
     * 
    **/
    data: XOR<ImageCreateInput, ImageUncheckedCreateInput>
  }


  /**
   * Image update
   */
  export type ImageUpdateArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * The data needed to update a Image.
     * 
    **/
    data: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
    /**
     * Choose, which Image to update.
     * 
    **/
    where: ImageWhereUniqueInput
  }


  /**
   * Image updateMany
   */
  export type ImageUpdateManyArgs = {
    /**
     * The data used to update Images.
     * 
    **/
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     * 
    **/
    where?: ImageWhereInput
  }


  /**
   * Image upsert
   */
  export type ImageUpsertArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * The filter to search for the Image to update in case it exists.
     * 
    **/
    where: ImageWhereUniqueInput
    /**
     * In case the Image found by the `where` argument doesn't exist, create a new Image with this data.
     * 
    **/
    create: XOR<ImageCreateInput, ImageUncheckedCreateInput>
    /**
     * In case the Image was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
  }


  /**
   * Image delete
   */
  export type ImageDeleteArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * Filter which Image to delete.
     * 
    **/
    where: ImageWhereUniqueInput
  }


  /**
   * Image deleteMany
   */
  export type ImageDeleteManyArgs = {
    /**
     * Filter which Images to delete
     * 
    **/
    where?: ImageWhereInput
  }


  /**
   * Image without action
   */
  export type ImageArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
  }



  /**
   * Model ImageExt
   */


  export type AggregateImageExt = {
    _count: ImageExtCountAggregateOutputType | null
    _avg: ImageExtAvgAggregateOutputType | null
    _sum: ImageExtSumAggregateOutputType | null
    _min: ImageExtMinAggregateOutputType | null
    _max: ImageExtMaxAggregateOutputType | null
  }

  export type ImageExtAvgAggregateOutputType = {
    views: number | null
    favorites: number | null
    ratio: Decimal | null
  }

  export type ImageExtSumAggregateOutputType = {
    views: number | null
    favorites: number | null
    ratio: Decimal | null
  }

  export type ImageExtMinAggregateOutputType = {
    imgId: string | null
    views: number | null
    favorites: number | null
    ratio: Decimal | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type ImageExtMaxAggregateOutputType = {
    imgId: string | null
    views: number | null
    favorites: number | null
    ratio: Decimal | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type ImageExtCountAggregateOutputType = {
    imgId: number
    views: number
    favorites: number
    ratio: number
    createAt: number
    updateAt: number
    _all: number
  }


  export type ImageExtAvgAggregateInputType = {
    views?: true
    favorites?: true
    ratio?: true
  }

  export type ImageExtSumAggregateInputType = {
    views?: true
    favorites?: true
    ratio?: true
  }

  export type ImageExtMinAggregateInputType = {
    imgId?: true
    views?: true
    favorites?: true
    ratio?: true
    createAt?: true
    updateAt?: true
  }

  export type ImageExtMaxAggregateInputType = {
    imgId?: true
    views?: true
    favorites?: true
    ratio?: true
    createAt?: true
    updateAt?: true
  }

  export type ImageExtCountAggregateInputType = {
    imgId?: true
    views?: true
    favorites?: true
    ratio?: true
    createAt?: true
    updateAt?: true
    _all?: true
  }

  export type ImageExtAggregateArgs = {
    /**
     * Filter which ImageExt to aggregate.
     * 
    **/
    where?: ImageExtWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ImageExts to fetch.
     * 
    **/
    orderBy?: Enumerable<ImageExtOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ImageExtWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ImageExts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ImageExts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ImageExts
    **/
    _count?: true | ImageExtCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImageExtAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImageExtSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageExtMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageExtMaxAggregateInputType
  }

  export type GetImageExtAggregateType<T extends ImageExtAggregateArgs> = {
        [P in keyof T & keyof AggregateImageExt]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImageExt[P]>
      : GetScalarType<T[P], AggregateImageExt[P]>
  }




  export type ImageExtGroupByArgs = {
    where?: ImageExtWhereInput
    orderBy?: Enumerable<ImageExtOrderByWithAggregationInput>
    by: Array<ImageExtScalarFieldEnum>
    having?: ImageExtScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageExtCountAggregateInputType | true
    _avg?: ImageExtAvgAggregateInputType
    _sum?: ImageExtSumAggregateInputType
    _min?: ImageExtMinAggregateInputType
    _max?: ImageExtMaxAggregateInputType
  }


  export type ImageExtGroupByOutputType = {
    imgId: string
    views: number
    favorites: number
    ratio: Decimal
    createAt: Date
    updateAt: Date
    _count: ImageExtCountAggregateOutputType | null
    _avg: ImageExtAvgAggregateOutputType | null
    _sum: ImageExtSumAggregateOutputType | null
    _min: ImageExtMinAggregateOutputType | null
    _max: ImageExtMaxAggregateOutputType | null
  }

  type GetImageExtGroupByPayload<T extends ImageExtGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ImageExtGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageExtGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageExtGroupByOutputType[P]>
            : GetScalarType<T[P], ImageExtGroupByOutputType[P]>
        }
      >
    >


  export type ImageExtSelect = {
    image?: boolean | ImageArgs
    imgId?: boolean
    views?: boolean
    favorites?: boolean
    ratio?: boolean
    createAt?: boolean
    updateAt?: boolean
    author?: boolean | AuthorArgs
    tag?: boolean | TagFindManyArgs
    _count?: boolean | ImageExtCountOutputTypeArgs
  }

  export type ImageExtInclude = {
    image?: boolean | ImageArgs
    author?: boolean | AuthorArgs
    tag?: boolean | TagFindManyArgs
    _count?: boolean | ImageExtCountOutputTypeArgs
  }

  export type ImageExtGetPayload<
    S extends boolean | null | undefined | ImageExtArgs,
    U = keyof S
      > = S extends true
        ? ImageExt
    : S extends undefined
    ? never
    : S extends ImageExtArgs | ImageExtFindManyArgs
    ?'include' extends U
    ? ImageExt  & {
    [P in TrueKeys<S['include']>]:
        P extends 'image' ? ImageGetPayload<S['include'][P]> :
        P extends 'author' ? AuthorGetPayload<S['include'][P]> | null :
        P extends 'tag' ? Array < TagGetPayload<S['include'][P]>>  :
        P extends '_count' ? ImageExtCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'image' ? ImageGetPayload<S['select'][P]> :
        P extends 'author' ? AuthorGetPayload<S['select'][P]> | null :
        P extends 'tag' ? Array < TagGetPayload<S['select'][P]>>  :
        P extends '_count' ? ImageExtCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof ImageExt ? ImageExt[P] : never
  } 
    : ImageExt
  : ImageExt


  type ImageExtCountArgs = Merge<
    Omit<ImageExtFindManyArgs, 'select' | 'include'> & {
      select?: ImageExtCountAggregateInputType | true
    }
  >

  export interface ImageExtDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ImageExt that matches the filter.
     * @param {ImageExtFindUniqueArgs} args - Arguments to find a ImageExt
     * @example
     * // Get one ImageExt
     * const imageExt = await prisma.imageExt.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ImageExtFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ImageExtFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ImageExt'> extends True ? CheckSelect<T, Prisma__ImageExtClient<ImageExt>, Prisma__ImageExtClient<ImageExtGetPayload<T>>> : CheckSelect<T, Prisma__ImageExtClient<ImageExt | null >, Prisma__ImageExtClient<ImageExtGetPayload<T> | null >>

    /**
     * Find the first ImageExt that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageExtFindFirstArgs} args - Arguments to find a ImageExt
     * @example
     * // Get one ImageExt
     * const imageExt = await prisma.imageExt.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ImageExtFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ImageExtFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ImageExt'> extends True ? CheckSelect<T, Prisma__ImageExtClient<ImageExt>, Prisma__ImageExtClient<ImageExtGetPayload<T>>> : CheckSelect<T, Prisma__ImageExtClient<ImageExt | null >, Prisma__ImageExtClient<ImageExtGetPayload<T> | null >>

    /**
     * Find zero or more ImageExts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageExtFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ImageExts
     * const imageExts = await prisma.imageExt.findMany()
     * 
     * // Get first 10 ImageExts
     * const imageExts = await prisma.imageExt.findMany({ take: 10 })
     * 
     * // Only select the `imgId`
     * const imageExtWithImgIdOnly = await prisma.imageExt.findMany({ select: { imgId: true } })
     * 
    **/
    findMany<T extends ImageExtFindManyArgs>(
      args?: SelectSubset<T, ImageExtFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ImageExt>>, PrismaPromise<Array<ImageExtGetPayload<T>>>>

    /**
     * Create a ImageExt.
     * @param {ImageExtCreateArgs} args - Arguments to create a ImageExt.
     * @example
     * // Create one ImageExt
     * const ImageExt = await prisma.imageExt.create({
     *   data: {
     *     // ... data to create a ImageExt
     *   }
     * })
     * 
    **/
    create<T extends ImageExtCreateArgs>(
      args: SelectSubset<T, ImageExtCreateArgs>
    ): CheckSelect<T, Prisma__ImageExtClient<ImageExt>, Prisma__ImageExtClient<ImageExtGetPayload<T>>>

    /**
     * Delete a ImageExt.
     * @param {ImageExtDeleteArgs} args - Arguments to delete one ImageExt.
     * @example
     * // Delete one ImageExt
     * const ImageExt = await prisma.imageExt.delete({
     *   where: {
     *     // ... filter to delete one ImageExt
     *   }
     * })
     * 
    **/
    delete<T extends ImageExtDeleteArgs>(
      args: SelectSubset<T, ImageExtDeleteArgs>
    ): CheckSelect<T, Prisma__ImageExtClient<ImageExt>, Prisma__ImageExtClient<ImageExtGetPayload<T>>>

    /**
     * Update one ImageExt.
     * @param {ImageExtUpdateArgs} args - Arguments to update one ImageExt.
     * @example
     * // Update one ImageExt
     * const imageExt = await prisma.imageExt.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ImageExtUpdateArgs>(
      args: SelectSubset<T, ImageExtUpdateArgs>
    ): CheckSelect<T, Prisma__ImageExtClient<ImageExt>, Prisma__ImageExtClient<ImageExtGetPayload<T>>>

    /**
     * Delete zero or more ImageExts.
     * @param {ImageExtDeleteManyArgs} args - Arguments to filter ImageExts to delete.
     * @example
     * // Delete a few ImageExts
     * const { count } = await prisma.imageExt.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ImageExtDeleteManyArgs>(
      args?: SelectSubset<T, ImageExtDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ImageExts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageExtUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ImageExts
     * const imageExt = await prisma.imageExt.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ImageExtUpdateManyArgs>(
      args: SelectSubset<T, ImageExtUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ImageExt.
     * @param {ImageExtUpsertArgs} args - Arguments to update or create a ImageExt.
     * @example
     * // Update or create a ImageExt
     * const imageExt = await prisma.imageExt.upsert({
     *   create: {
     *     // ... data to create a ImageExt
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ImageExt we want to update
     *   }
     * })
    **/
    upsert<T extends ImageExtUpsertArgs>(
      args: SelectSubset<T, ImageExtUpsertArgs>
    ): CheckSelect<T, Prisma__ImageExtClient<ImageExt>, Prisma__ImageExtClient<ImageExtGetPayload<T>>>

    /**
     * Count the number of ImageExts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageExtCountArgs} args - Arguments to filter ImageExts to count.
     * @example
     * // Count the number of ImageExts
     * const count = await prisma.imageExt.count({
     *   where: {
     *     // ... the filter for the ImageExts we want to count
     *   }
     * })
    **/
    count<T extends ImageExtCountArgs>(
      args?: Subset<T, ImageExtCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageExtCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ImageExt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageExtAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageExtAggregateArgs>(args: Subset<T, ImageExtAggregateArgs>): PrismaPromise<GetImageExtAggregateType<T>>

    /**
     * Group by ImageExt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageExtGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImageExtGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImageExtGroupByArgs['orderBy'] }
        : { orderBy?: ImageExtGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImageExtGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageExtGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ImageExt.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ImageExtClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    image<T extends ImageArgs = {}>(args?: Subset<T, ImageArgs>): CheckSelect<T, Prisma__ImageClient<Image | null >, Prisma__ImageClient<ImageGetPayload<T> | null >>;

    author<T extends AuthorArgs = {}>(args?: Subset<T, AuthorArgs>): CheckSelect<T, Prisma__AuthorClient<Author | null >, Prisma__AuthorClient<AuthorGetPayload<T> | null >>;

    tag<T extends TagFindManyArgs = {}>(args?: Subset<T, TagFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Tag>>, PrismaPromise<Array<TagGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ImageExt findUnique
   */
  export type ImageExtFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ImageExt
     * 
    **/
    select?: ImageExtSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageExtInclude | null
    /**
     * Throw an Error if a ImageExt can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ImageExt to fetch.
     * 
    **/
    where: ImageExtWhereUniqueInput
  }


  /**
   * ImageExt findFirst
   */
  export type ImageExtFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ImageExt
     * 
    **/
    select?: ImageExtSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageExtInclude | null
    /**
     * Throw an Error if a ImageExt can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ImageExt to fetch.
     * 
    **/
    where?: ImageExtWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ImageExts to fetch.
     * 
    **/
    orderBy?: Enumerable<ImageExtOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ImageExts.
     * 
    **/
    cursor?: ImageExtWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ImageExts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ImageExts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ImageExts.
     * 
    **/
    distinct?: Enumerable<ImageExtScalarFieldEnum>
  }


  /**
   * ImageExt findMany
   */
  export type ImageExtFindManyArgs = {
    /**
     * Select specific fields to fetch from the ImageExt
     * 
    **/
    select?: ImageExtSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageExtInclude | null
    /**
     * Filter, which ImageExts to fetch.
     * 
    **/
    where?: ImageExtWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ImageExts to fetch.
     * 
    **/
    orderBy?: Enumerable<ImageExtOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ImageExts.
     * 
    **/
    cursor?: ImageExtWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ImageExts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ImageExts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ImageExtScalarFieldEnum>
  }


  /**
   * ImageExt create
   */
  export type ImageExtCreateArgs = {
    /**
     * Select specific fields to fetch from the ImageExt
     * 
    **/
    select?: ImageExtSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageExtInclude | null
    /**
     * The data needed to create a ImageExt.
     * 
    **/
    data: XOR<ImageExtCreateInput, ImageExtUncheckedCreateInput>
  }


  /**
   * ImageExt update
   */
  export type ImageExtUpdateArgs = {
    /**
     * Select specific fields to fetch from the ImageExt
     * 
    **/
    select?: ImageExtSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageExtInclude | null
    /**
     * The data needed to update a ImageExt.
     * 
    **/
    data: XOR<ImageExtUpdateInput, ImageExtUncheckedUpdateInput>
    /**
     * Choose, which ImageExt to update.
     * 
    **/
    where: ImageExtWhereUniqueInput
  }


  /**
   * ImageExt updateMany
   */
  export type ImageExtUpdateManyArgs = {
    /**
     * The data used to update ImageExts.
     * 
    **/
    data: XOR<ImageExtUpdateManyMutationInput, ImageExtUncheckedUpdateManyInput>
    /**
     * Filter which ImageExts to update
     * 
    **/
    where?: ImageExtWhereInput
  }


  /**
   * ImageExt upsert
   */
  export type ImageExtUpsertArgs = {
    /**
     * Select specific fields to fetch from the ImageExt
     * 
    **/
    select?: ImageExtSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageExtInclude | null
    /**
     * The filter to search for the ImageExt to update in case it exists.
     * 
    **/
    where: ImageExtWhereUniqueInput
    /**
     * In case the ImageExt found by the `where` argument doesn't exist, create a new ImageExt with this data.
     * 
    **/
    create: XOR<ImageExtCreateInput, ImageExtUncheckedCreateInput>
    /**
     * In case the ImageExt was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ImageExtUpdateInput, ImageExtUncheckedUpdateInput>
  }


  /**
   * ImageExt delete
   */
  export type ImageExtDeleteArgs = {
    /**
     * Select specific fields to fetch from the ImageExt
     * 
    **/
    select?: ImageExtSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageExtInclude | null
    /**
     * Filter which ImageExt to delete.
     * 
    **/
    where: ImageExtWhereUniqueInput
  }


  /**
   * ImageExt deleteMany
   */
  export type ImageExtDeleteManyArgs = {
    /**
     * Filter which ImageExts to delete
     * 
    **/
    where?: ImageExtWhereInput
  }


  /**
   * ImageExt without action
   */
  export type ImageExtArgs = {
    /**
     * Select specific fields to fetch from the ImageExt
     * 
    **/
    select?: ImageExtSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageExtInclude | null
  }



  /**
   * Model Author
   */


  export type AggregateAuthor = {
    _count: AuthorCountAggregateOutputType | null
    _min: AuthorMinAggregateOutputType | null
    _max: AuthorMaxAggregateOutputType | null
  }

  export type AuthorMinAggregateOutputType = {
    name: string | null
    id: string | null
    desc: string | null
    type: string | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type AuthorMaxAggregateOutputType = {
    name: string | null
    id: string | null
    desc: string | null
    type: string | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type AuthorCountAggregateOutputType = {
    name: number
    id: number
    desc: number
    type: number
    createAt: number
    updateAt: number
    _all: number
  }


  export type AuthorMinAggregateInputType = {
    name?: true
    id?: true
    desc?: true
    type?: true
    createAt?: true
    updateAt?: true
  }

  export type AuthorMaxAggregateInputType = {
    name?: true
    id?: true
    desc?: true
    type?: true
    createAt?: true
    updateAt?: true
  }

  export type AuthorCountAggregateInputType = {
    name?: true
    id?: true
    desc?: true
    type?: true
    createAt?: true
    updateAt?: true
    _all?: true
  }

  export type AuthorAggregateArgs = {
    /**
     * Filter which Author to aggregate.
     * 
    **/
    where?: AuthorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Authors to fetch.
     * 
    **/
    orderBy?: Enumerable<AuthorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AuthorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Authors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Authors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Authors
    **/
    _count?: true | AuthorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuthorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuthorMaxAggregateInputType
  }

  export type GetAuthorAggregateType<T extends AuthorAggregateArgs> = {
        [P in keyof T & keyof AggregateAuthor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuthor[P]>
      : GetScalarType<T[P], AggregateAuthor[P]>
  }




  export type AuthorGroupByArgs = {
    where?: AuthorWhereInput
    orderBy?: Enumerable<AuthorOrderByWithAggregationInput>
    by: Array<AuthorScalarFieldEnum>
    having?: AuthorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuthorCountAggregateInputType | true
    _min?: AuthorMinAggregateInputType
    _max?: AuthorMaxAggregateInputType
  }


  export type AuthorGroupByOutputType = {
    name: string
    id: string | null
    desc: string
    type: string
    createAt: Date
    updateAt: Date
    _count: AuthorCountAggregateOutputType | null
    _min: AuthorMinAggregateOutputType | null
    _max: AuthorMaxAggregateOutputType | null
  }

  type GetAuthorGroupByPayload<T extends AuthorGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AuthorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuthorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuthorGroupByOutputType[P]>
            : GetScalarType<T[P], AuthorGroupByOutputType[P]>
        }
      >
    >


  export type AuthorSelect = {
    imageExt?: boolean | ImageExtArgs
    name?: boolean
    id?: boolean
    desc?: boolean
    type?: boolean
    createAt?: boolean
    updateAt?: boolean
  }

  export type AuthorInclude = {
    imageExt?: boolean | ImageExtArgs
  }

  export type AuthorGetPayload<
    S extends boolean | null | undefined | AuthorArgs,
    U = keyof S
      > = S extends true
        ? Author
    : S extends undefined
    ? never
    : S extends AuthorArgs | AuthorFindManyArgs
    ?'include' extends U
    ? Author  & {
    [P in TrueKeys<S['include']>]:
        P extends 'imageExt' ? ImageExtGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'imageExt' ? ImageExtGetPayload<S['select'][P]> :  P extends keyof Author ? Author[P] : never
  } 
    : Author
  : Author


  type AuthorCountArgs = Merge<
    Omit<AuthorFindManyArgs, 'select' | 'include'> & {
      select?: AuthorCountAggregateInputType | true
    }
  >

  export interface AuthorDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Author that matches the filter.
     * @param {AuthorFindUniqueArgs} args - Arguments to find a Author
     * @example
     * // Get one Author
     * const author = await prisma.author.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AuthorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AuthorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Author'> extends True ? CheckSelect<T, Prisma__AuthorClient<Author>, Prisma__AuthorClient<AuthorGetPayload<T>>> : CheckSelect<T, Prisma__AuthorClient<Author | null >, Prisma__AuthorClient<AuthorGetPayload<T> | null >>

    /**
     * Find the first Author that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorFindFirstArgs} args - Arguments to find a Author
     * @example
     * // Get one Author
     * const author = await prisma.author.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AuthorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AuthorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Author'> extends True ? CheckSelect<T, Prisma__AuthorClient<Author>, Prisma__AuthorClient<AuthorGetPayload<T>>> : CheckSelect<T, Prisma__AuthorClient<Author | null >, Prisma__AuthorClient<AuthorGetPayload<T> | null >>

    /**
     * Find zero or more Authors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Authors
     * const authors = await prisma.author.findMany()
     * 
     * // Get first 10 Authors
     * const authors = await prisma.author.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const authorWithNameOnly = await prisma.author.findMany({ select: { name: true } })
     * 
    **/
    findMany<T extends AuthorFindManyArgs>(
      args?: SelectSubset<T, AuthorFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Author>>, PrismaPromise<Array<AuthorGetPayload<T>>>>

    /**
     * Create a Author.
     * @param {AuthorCreateArgs} args - Arguments to create a Author.
     * @example
     * // Create one Author
     * const Author = await prisma.author.create({
     *   data: {
     *     // ... data to create a Author
     *   }
     * })
     * 
    **/
    create<T extends AuthorCreateArgs>(
      args: SelectSubset<T, AuthorCreateArgs>
    ): CheckSelect<T, Prisma__AuthorClient<Author>, Prisma__AuthorClient<AuthorGetPayload<T>>>

    /**
     * Delete a Author.
     * @param {AuthorDeleteArgs} args - Arguments to delete one Author.
     * @example
     * // Delete one Author
     * const Author = await prisma.author.delete({
     *   where: {
     *     // ... filter to delete one Author
     *   }
     * })
     * 
    **/
    delete<T extends AuthorDeleteArgs>(
      args: SelectSubset<T, AuthorDeleteArgs>
    ): CheckSelect<T, Prisma__AuthorClient<Author>, Prisma__AuthorClient<AuthorGetPayload<T>>>

    /**
     * Update one Author.
     * @param {AuthorUpdateArgs} args - Arguments to update one Author.
     * @example
     * // Update one Author
     * const author = await prisma.author.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AuthorUpdateArgs>(
      args: SelectSubset<T, AuthorUpdateArgs>
    ): CheckSelect<T, Prisma__AuthorClient<Author>, Prisma__AuthorClient<AuthorGetPayload<T>>>

    /**
     * Delete zero or more Authors.
     * @param {AuthorDeleteManyArgs} args - Arguments to filter Authors to delete.
     * @example
     * // Delete a few Authors
     * const { count } = await prisma.author.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AuthorDeleteManyArgs>(
      args?: SelectSubset<T, AuthorDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Authors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Authors
     * const author = await prisma.author.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AuthorUpdateManyArgs>(
      args: SelectSubset<T, AuthorUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Author.
     * @param {AuthorUpsertArgs} args - Arguments to update or create a Author.
     * @example
     * // Update or create a Author
     * const author = await prisma.author.upsert({
     *   create: {
     *     // ... data to create a Author
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Author we want to update
     *   }
     * })
    **/
    upsert<T extends AuthorUpsertArgs>(
      args: SelectSubset<T, AuthorUpsertArgs>
    ): CheckSelect<T, Prisma__AuthorClient<Author>, Prisma__AuthorClient<AuthorGetPayload<T>>>

    /**
     * Count the number of Authors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorCountArgs} args - Arguments to filter Authors to count.
     * @example
     * // Count the number of Authors
     * const count = await prisma.author.count({
     *   where: {
     *     // ... the filter for the Authors we want to count
     *   }
     * })
    **/
    count<T extends AuthorCountArgs>(
      args?: Subset<T, AuthorCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuthorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Author.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuthorAggregateArgs>(args: Subset<T, AuthorAggregateArgs>): PrismaPromise<GetAuthorAggregateType<T>>

    /**
     * Group by Author.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuthorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuthorGroupByArgs['orderBy'] }
        : { orderBy?: AuthorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuthorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthorGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Author.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AuthorClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    imageExt<T extends ImageExtArgs = {}>(args?: Subset<T, ImageExtArgs>): CheckSelect<T, Prisma__ImageExtClient<ImageExt | null >, Prisma__ImageExtClient<ImageExtGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Author findUnique
   */
  export type AuthorFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Author
     * 
    **/
    select?: AuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AuthorInclude | null
    /**
     * Throw an Error if a Author can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Author to fetch.
     * 
    **/
    where: AuthorWhereUniqueInput
  }


  /**
   * Author findFirst
   */
  export type AuthorFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Author
     * 
    **/
    select?: AuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AuthorInclude | null
    /**
     * Throw an Error if a Author can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Author to fetch.
     * 
    **/
    where?: AuthorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Authors to fetch.
     * 
    **/
    orderBy?: Enumerable<AuthorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Authors.
     * 
    **/
    cursor?: AuthorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Authors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Authors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Authors.
     * 
    **/
    distinct?: Enumerable<AuthorScalarFieldEnum>
  }


  /**
   * Author findMany
   */
  export type AuthorFindManyArgs = {
    /**
     * Select specific fields to fetch from the Author
     * 
    **/
    select?: AuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AuthorInclude | null
    /**
     * Filter, which Authors to fetch.
     * 
    **/
    where?: AuthorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Authors to fetch.
     * 
    **/
    orderBy?: Enumerable<AuthorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Authors.
     * 
    **/
    cursor?: AuthorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Authors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Authors.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AuthorScalarFieldEnum>
  }


  /**
   * Author create
   */
  export type AuthorCreateArgs = {
    /**
     * Select specific fields to fetch from the Author
     * 
    **/
    select?: AuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AuthorInclude | null
    /**
     * The data needed to create a Author.
     * 
    **/
    data: XOR<AuthorCreateInput, AuthorUncheckedCreateInput>
  }


  /**
   * Author update
   */
  export type AuthorUpdateArgs = {
    /**
     * Select specific fields to fetch from the Author
     * 
    **/
    select?: AuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AuthorInclude | null
    /**
     * The data needed to update a Author.
     * 
    **/
    data: XOR<AuthorUpdateInput, AuthorUncheckedUpdateInput>
    /**
     * Choose, which Author to update.
     * 
    **/
    where: AuthorWhereUniqueInput
  }


  /**
   * Author updateMany
   */
  export type AuthorUpdateManyArgs = {
    /**
     * The data used to update Authors.
     * 
    **/
    data: XOR<AuthorUpdateManyMutationInput, AuthorUncheckedUpdateManyInput>
    /**
     * Filter which Authors to update
     * 
    **/
    where?: AuthorWhereInput
  }


  /**
   * Author upsert
   */
  export type AuthorUpsertArgs = {
    /**
     * Select specific fields to fetch from the Author
     * 
    **/
    select?: AuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AuthorInclude | null
    /**
     * The filter to search for the Author to update in case it exists.
     * 
    **/
    where: AuthorWhereUniqueInput
    /**
     * In case the Author found by the `where` argument doesn't exist, create a new Author with this data.
     * 
    **/
    create: XOR<AuthorCreateInput, AuthorUncheckedCreateInput>
    /**
     * In case the Author was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AuthorUpdateInput, AuthorUncheckedUpdateInput>
  }


  /**
   * Author delete
   */
  export type AuthorDeleteArgs = {
    /**
     * Select specific fields to fetch from the Author
     * 
    **/
    select?: AuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AuthorInclude | null
    /**
     * Filter which Author to delete.
     * 
    **/
    where: AuthorWhereUniqueInput
  }


  /**
   * Author deleteMany
   */
  export type AuthorDeleteManyArgs = {
    /**
     * Filter which Authors to delete
     * 
    **/
    where?: AuthorWhereInput
  }


  /**
   * Author without action
   */
  export type AuthorArgs = {
    /**
     * Select specific fields to fetch from the Author
     * 
    **/
    select?: AuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AuthorInclude | null
  }



  /**
   * Model Tag
   */


  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagMinAggregateOutputType = {
    name: string | null
    alias: string | null
    id: string | null
    categoryId: string | null
    category: string | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type TagMaxAggregateOutputType = {
    name: string | null
    alias: string | null
    id: string | null
    categoryId: string | null
    category: string | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type TagCountAggregateOutputType = {
    name: number
    alias: number
    id: number
    categoryId: number
    category: number
    createAt: number
    updateAt: number
    _all: number
  }


  export type TagMinAggregateInputType = {
    name?: true
    alias?: true
    id?: true
    categoryId?: true
    category?: true
    createAt?: true
    updateAt?: true
  }

  export type TagMaxAggregateInputType = {
    name?: true
    alias?: true
    id?: true
    categoryId?: true
    category?: true
    createAt?: true
    updateAt?: true
  }

  export type TagCountAggregateInputType = {
    name?: true
    alias?: true
    id?: true
    categoryId?: true
    category?: true
    createAt?: true
    updateAt?: true
    _all?: true
  }

  export type TagAggregateArgs = {
    /**
     * Filter which Tag to aggregate.
     * 
    **/
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     * 
    **/
    orderBy?: Enumerable<TagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs = {
    where?: TagWhereInput
    orderBy?: Enumerable<TagOrderByWithAggregationInput>
    by: Array<TagScalarFieldEnum>
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }


  export type TagGroupByOutputType = {
    name: string
    alias: string | null
    id: string | null
    categoryId: string
    category: string
    createAt: Date
    updateAt: Date
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect = {
    imageExt?: boolean | ImageExtArgs
    name?: boolean
    alias?: boolean
    id?: boolean
    categoryId?: boolean
    category?: boolean
    createAt?: boolean
    updateAt?: boolean
  }

  export type TagInclude = {
    imageExt?: boolean | ImageExtArgs
  }

  export type TagGetPayload<
    S extends boolean | null | undefined | TagArgs,
    U = keyof S
      > = S extends true
        ? Tag
    : S extends undefined
    ? never
    : S extends TagArgs | TagFindManyArgs
    ?'include' extends U
    ? Tag  & {
    [P in TrueKeys<S['include']>]:
        P extends 'imageExt' ? ImageExtGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'imageExt' ? ImageExtGetPayload<S['select'][P]> :  P extends keyof Tag ? Tag[P] : never
  } 
    : Tag
  : Tag


  type TagCountArgs = Merge<
    Omit<TagFindManyArgs, 'select' | 'include'> & {
      select?: TagCountAggregateInputType | true
    }
  >

  export interface TagDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TagFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TagFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Tag'> extends True ? CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>> : CheckSelect<T, Prisma__TagClient<Tag | null >, Prisma__TagClient<TagGetPayload<T> | null >>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TagFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TagFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Tag'> extends True ? CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>> : CheckSelect<T, Prisma__TagClient<Tag | null >, Prisma__TagClient<TagGetPayload<T> | null >>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const tagWithNameOnly = await prisma.tag.findMany({ select: { name: true } })
     * 
    **/
    findMany<T extends TagFindManyArgs>(
      args?: SelectSubset<T, TagFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Tag>>, PrismaPromise<Array<TagGetPayload<T>>>>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
    **/
    create<T extends TagCreateArgs>(
      args: SelectSubset<T, TagCreateArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
    **/
    delete<T extends TagDeleteArgs>(
      args: SelectSubset<T, TagDeleteArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TagUpdateArgs>(
      args: SelectSubset<T, TagUpdateArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TagDeleteManyArgs>(
      args?: SelectSubset<T, TagDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TagUpdateManyArgs>(
      args: SelectSubset<T, TagUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
    **/
    upsert<T extends TagUpsertArgs>(
      args: SelectSubset<T, TagUpsertArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TagClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    imageExt<T extends ImageExtArgs = {}>(args?: Subset<T, ImageExtArgs>): CheckSelect<T, Prisma__ImageExtClient<ImageExt | null >, Prisma__ImageExtClient<ImageExtGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * Throw an Error if a Tag can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Tag to fetch.
     * 
    **/
    where: TagWhereUniqueInput
  }


  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * Throw an Error if a Tag can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Tag to fetch.
     * 
    **/
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     * 
    **/
    orderBy?: Enumerable<TagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     * 
    **/
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     * 
    **/
    distinct?: Enumerable<TagScalarFieldEnum>
  }


  /**
   * Tag findMany
   */
  export type TagFindManyArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * Filter, which Tags to fetch.
     * 
    **/
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     * 
    **/
    orderBy?: Enumerable<TagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     * 
    **/
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TagScalarFieldEnum>
  }


  /**
   * Tag create
   */
  export type TagCreateArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * The data needed to create a Tag.
     * 
    **/
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }


  /**
   * Tag update
   */
  export type TagUpdateArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * The data needed to update a Tag.
     * 
    **/
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     * 
    **/
    where: TagWhereUniqueInput
  }


  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs = {
    /**
     * The data used to update Tags.
     * 
    **/
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     * 
    **/
    where?: TagWhereInput
  }


  /**
   * Tag upsert
   */
  export type TagUpsertArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * The filter to search for the Tag to update in case it exists.
     * 
    **/
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     * 
    **/
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }


  /**
   * Tag delete
   */
  export type TagDeleteArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * Filter which Tag to delete.
     * 
    **/
    where: TagWhereUniqueInput
  }


  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs = {
    /**
     * Filter which Tags to delete
     * 
    **/
    where?: TagWhereInput
  }


  /**
   * Tag without action
   */
  export type TagArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ImageScalarFieldEnum: {
    imgId: 'imgId',
    fileType: 'fileType',
    fileSize: 'fileSize',
    dimensionX: 'dimensionX',
    dimensionY: 'dimensionY',
    purity: 'purity',
    category: 'category',
    path: 'path',
    url: 'url',
    source: 'source',
    colors: 'colors',
    desc: 'desc',
    createdTime: 'createdTime',
    createAt: 'createAt',
    updateAt: 'updateAt'
  };

  export type ImageScalarFieldEnum = (typeof ImageScalarFieldEnum)[keyof typeof ImageScalarFieldEnum]


  export const ImageExtScalarFieldEnum: {
    imgId: 'imgId',
    views: 'views',
    favorites: 'favorites',
    ratio: 'ratio',
    createAt: 'createAt',
    updateAt: 'updateAt'
  };

  export type ImageExtScalarFieldEnum = (typeof ImageExtScalarFieldEnum)[keyof typeof ImageExtScalarFieldEnum]


  export const AuthorScalarFieldEnum: {
    name: 'name',
    id: 'id',
    desc: 'desc',
    type: 'type',
    createAt: 'createAt',
    updateAt: 'updateAt'
  };

  export type AuthorScalarFieldEnum = (typeof AuthorScalarFieldEnum)[keyof typeof AuthorScalarFieldEnum]


  export const TagScalarFieldEnum: {
    name: 'name',
    alias: 'alias',
    id: 'id',
    categoryId: 'categoryId',
    category: 'category',
    createAt: 'createAt',
    updateAt: 'updateAt'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type ImageWhereInput = {
    AND?: Enumerable<ImageWhereInput>
    OR?: Enumerable<ImageWhereInput>
    NOT?: Enumerable<ImageWhereInput>
    imgId?: StringFilter | string
    fileType?: StringFilter | string
    fileSize?: IntFilter | number
    dimensionX?: IntFilter | number
    dimensionY?: IntFilter | number
    purity?: StringFilter | string
    category?: StringFilter | string
    path?: StringFilter | string
    url?: StringFilter | string
    source?: StringFilter | string
    colors?: StringFilter | string
    desc?: StringFilter | string
    createdTime?: DateTimeFilter | Date | string
    createAt?: DateTimeFilter | Date | string
    updateAt?: DateTimeFilter | Date | string
    imageExt?: XOR<ImageExtRelationFilter, ImageExtWhereInput> | null
  }

  export type ImageOrderByWithRelationInput = {
    imgId?: SortOrder
    fileType?: SortOrder
    fileSize?: SortOrder
    dimensionX?: SortOrder
    dimensionY?: SortOrder
    purity?: SortOrder
    category?: SortOrder
    path?: SortOrder
    url?: SortOrder
    source?: SortOrder
    colors?: SortOrder
    desc?: SortOrder
    createdTime?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    imageExt?: ImageExtOrderByWithRelationInput
  }

  export type ImageWhereUniqueInput = {
    imgId?: string
  }

  export type ImageOrderByWithAggregationInput = {
    imgId?: SortOrder
    fileType?: SortOrder
    fileSize?: SortOrder
    dimensionX?: SortOrder
    dimensionY?: SortOrder
    purity?: SortOrder
    category?: SortOrder
    path?: SortOrder
    url?: SortOrder
    source?: SortOrder
    colors?: SortOrder
    desc?: SortOrder
    createdTime?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    _count?: ImageCountOrderByAggregateInput
    _avg?: ImageAvgOrderByAggregateInput
    _max?: ImageMaxOrderByAggregateInput
    _min?: ImageMinOrderByAggregateInput
    _sum?: ImageSumOrderByAggregateInput
  }

  export type ImageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ImageScalarWhereWithAggregatesInput>
    OR?: Enumerable<ImageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ImageScalarWhereWithAggregatesInput>
    imgId?: StringWithAggregatesFilter | string
    fileType?: StringWithAggregatesFilter | string
    fileSize?: IntWithAggregatesFilter | number
    dimensionX?: IntWithAggregatesFilter | number
    dimensionY?: IntWithAggregatesFilter | number
    purity?: StringWithAggregatesFilter | string
    category?: StringWithAggregatesFilter | string
    path?: StringWithAggregatesFilter | string
    url?: StringWithAggregatesFilter | string
    source?: StringWithAggregatesFilter | string
    colors?: StringWithAggregatesFilter | string
    desc?: StringWithAggregatesFilter | string
    createdTime?: DateTimeWithAggregatesFilter | Date | string
    createAt?: DateTimeWithAggregatesFilter | Date | string
    updateAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ImageExtWhereInput = {
    AND?: Enumerable<ImageExtWhereInput>
    OR?: Enumerable<ImageExtWhereInput>
    NOT?: Enumerable<ImageExtWhereInput>
    image?: XOR<ImageRelationFilter, ImageWhereInput>
    imgId?: StringFilter | string
    views?: IntFilter | number
    favorites?: IntFilter | number
    ratio?: DecimalFilter | Decimal | number | string
    createAt?: DateTimeFilter | Date | string
    updateAt?: DateTimeFilter | Date | string
    author?: XOR<AuthorRelationFilter, AuthorWhereInput> | null
    tag?: TagListRelationFilter
  }

  export type ImageExtOrderByWithRelationInput = {
    image?: ImageOrderByWithRelationInput
    imgId?: SortOrder
    views?: SortOrder
    favorites?: SortOrder
    ratio?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    author?: AuthorOrderByWithRelationInput
    tag?: TagOrderByRelationAggregateInput
  }

  export type ImageExtWhereUniqueInput = {
    imgId?: string
  }

  export type ImageExtOrderByWithAggregationInput = {
    imgId?: SortOrder
    views?: SortOrder
    favorites?: SortOrder
    ratio?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    _count?: ImageExtCountOrderByAggregateInput
    _avg?: ImageExtAvgOrderByAggregateInput
    _max?: ImageExtMaxOrderByAggregateInput
    _min?: ImageExtMinOrderByAggregateInput
    _sum?: ImageExtSumOrderByAggregateInput
  }

  export type ImageExtScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ImageExtScalarWhereWithAggregatesInput>
    OR?: Enumerable<ImageExtScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ImageExtScalarWhereWithAggregatesInput>
    imgId?: StringWithAggregatesFilter | string
    views?: IntWithAggregatesFilter | number
    favorites?: IntWithAggregatesFilter | number
    ratio?: DecimalWithAggregatesFilter | Decimal | number | string
    createAt?: DateTimeWithAggregatesFilter | Date | string
    updateAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type AuthorWhereInput = {
    AND?: Enumerable<AuthorWhereInput>
    OR?: Enumerable<AuthorWhereInput>
    NOT?: Enumerable<AuthorWhereInput>
    imageExt?: XOR<ImageExtRelationFilter, ImageExtWhereInput>
    name?: StringFilter | string
    id?: StringNullableFilter | string | null
    desc?: StringFilter | string
    type?: StringFilter | string
    createAt?: DateTimeFilter | Date | string
    updateAt?: DateTimeFilter | Date | string
  }

  export type AuthorOrderByWithRelationInput = {
    imageExt?: ImageExtOrderByWithRelationInput
    name?: SortOrder
    id?: SortOrder
    desc?: SortOrder
    type?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type AuthorWhereUniqueInput = {
    name?: string
  }

  export type AuthorOrderByWithAggregationInput = {
    name?: SortOrder
    id?: SortOrder
    desc?: SortOrder
    type?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    _count?: AuthorCountOrderByAggregateInput
    _max?: AuthorMaxOrderByAggregateInput
    _min?: AuthorMinOrderByAggregateInput
  }

  export type AuthorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AuthorScalarWhereWithAggregatesInput>
    OR?: Enumerable<AuthorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AuthorScalarWhereWithAggregatesInput>
    name?: StringWithAggregatesFilter | string
    id?: StringNullableWithAggregatesFilter | string | null
    desc?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    createAt?: DateTimeWithAggregatesFilter | Date | string
    updateAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TagWhereInput = {
    AND?: Enumerable<TagWhereInput>
    OR?: Enumerable<TagWhereInput>
    NOT?: Enumerable<TagWhereInput>
    imageExt?: XOR<ImageExtRelationFilter, ImageExtWhereInput>
    name?: StringFilter | string
    alias?: StringNullableFilter | string | null
    id?: StringNullableFilter | string | null
    categoryId?: StringFilter | string
    category?: StringFilter | string
    createAt?: DateTimeFilter | Date | string
    updateAt?: DateTimeFilter | Date | string
  }

  export type TagOrderByWithRelationInput = {
    imageExt?: ImageExtOrderByWithRelationInput
    name?: SortOrder
    alias?: SortOrder
    id?: SortOrder
    categoryId?: SortOrder
    category?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type TagWhereUniqueInput = {
    name?: string
  }

  export type TagOrderByWithAggregationInput = {
    name?: SortOrder
    alias?: SortOrder
    id?: SortOrder
    categoryId?: SortOrder
    category?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    _count?: TagCountOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TagScalarWhereWithAggregatesInput>
    OR?: Enumerable<TagScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TagScalarWhereWithAggregatesInput>
    name?: StringWithAggregatesFilter | string
    alias?: StringNullableWithAggregatesFilter | string | null
    id?: StringNullableWithAggregatesFilter | string | null
    categoryId?: StringWithAggregatesFilter | string
    category?: StringWithAggregatesFilter | string
    createAt?: DateTimeWithAggregatesFilter | Date | string
    updateAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ImageCreateInput = {
    imgId: string
    fileType: string
    fileSize: number
    dimensionX: number
    dimensionY: number
    purity: string
    category: string
    path: string
    url: string
    source: string
    colors: string
    desc: string
    createdTime: Date | string
    createAt?: Date | string
    updateAt: Date | string
    imageExt?: ImageExtCreateNestedOneWithoutImageInput
  }

  export type ImageUncheckedCreateInput = {
    imgId: string
    fileType: string
    fileSize: number
    dimensionX: number
    dimensionY: number
    purity: string
    category: string
    path: string
    url: string
    source: string
    colors: string
    desc: string
    createdTime: Date | string
    createAt?: Date | string
    updateAt: Date | string
    imageExt?: ImageExtUncheckedCreateNestedOneWithoutImageInput
  }

  export type ImageUpdateInput = {
    imgId?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    dimensionX?: IntFieldUpdateOperationsInput | number
    dimensionY?: IntFieldUpdateOperationsInput | number
    purity?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    createdTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageExt?: ImageExtUpdateOneWithoutImageInput
  }

  export type ImageUncheckedUpdateInput = {
    imgId?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    dimensionX?: IntFieldUpdateOperationsInput | number
    dimensionY?: IntFieldUpdateOperationsInput | number
    purity?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    createdTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageExt?: ImageExtUncheckedUpdateOneWithoutImageInput
  }

  export type ImageUpdateManyMutationInput = {
    imgId?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    dimensionX?: IntFieldUpdateOperationsInput | number
    dimensionY?: IntFieldUpdateOperationsInput | number
    purity?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    createdTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageUncheckedUpdateManyInput = {
    imgId?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    dimensionX?: IntFieldUpdateOperationsInput | number
    dimensionY?: IntFieldUpdateOperationsInput | number
    purity?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    createdTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageExtCreateInput = {
    image: ImageCreateNestedOneWithoutImageExtInput
    views: number
    favorites: number
    ratio: Decimal | number | string
    createAt: Date | string
    updateAt: Date | string
    author?: AuthorCreateNestedOneWithoutImageExtInput
    tag?: TagCreateNestedManyWithoutImageExtInput
  }

  export type ImageExtUncheckedCreateInput = {
    imgId: string
    views: number
    favorites: number
    ratio: Decimal | number | string
    createAt: Date | string
    updateAt: Date | string
    author?: AuthorUncheckedCreateNestedOneWithoutImageExtInput
    tag?: TagUncheckedCreateNestedManyWithoutImageExtInput
  }

  export type ImageExtUpdateInput = {
    image?: ImageUpdateOneRequiredWithoutImageExtInput
    views?: IntFieldUpdateOperationsInput | number
    favorites?: IntFieldUpdateOperationsInput | number
    ratio?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: AuthorUpdateOneWithoutImageExtInput
    tag?: TagUpdateManyWithoutImageExtInput
  }

  export type ImageExtUncheckedUpdateInput = {
    imgId?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    favorites?: IntFieldUpdateOperationsInput | number
    ratio?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: AuthorUncheckedUpdateOneWithoutImageExtInput
    tag?: TagUncheckedUpdateManyWithoutImageExtInput
  }

  export type ImageExtUpdateManyMutationInput = {
    views?: IntFieldUpdateOperationsInput | number
    favorites?: IntFieldUpdateOperationsInput | number
    ratio?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageExtUncheckedUpdateManyInput = {
    imgId?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    favorites?: IntFieldUpdateOperationsInput | number
    ratio?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthorCreateInput = {
    imageExt: ImageExtCreateNestedOneWithoutAuthorInput
    id?: string | null
    desc: string
    type: string
    createAt?: Date | string
    updateAt: Date | string
  }

  export type AuthorUncheckedCreateInput = {
    name: string
    id?: string | null
    desc: string
    type: string
    createAt?: Date | string
    updateAt: Date | string
  }

  export type AuthorUpdateInput = {
    imageExt?: ImageExtUpdateOneRequiredWithoutAuthorInput
    id?: NullableStringFieldUpdateOperationsInput | string | null
    desc?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthorUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: NullableStringFieldUpdateOperationsInput | string | null
    desc?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthorUpdateManyMutationInput = {
    id?: NullableStringFieldUpdateOperationsInput | string | null
    desc?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthorUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: NullableStringFieldUpdateOperationsInput | string | null
    desc?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagCreateInput = {
    imageExt: ImageExtCreateNestedOneWithoutTagInput
    alias?: string | null
    id?: string | null
    categoryId: string
    category: string
    createAt?: Date | string
    updateAt: Date | string
  }

  export type TagUncheckedCreateInput = {
    name: string
    alias?: string | null
    id?: string | null
    categoryId: string
    category: string
    createAt?: Date | string
    updateAt: Date | string
  }

  export type TagUpdateInput = {
    imageExt?: ImageExtUpdateOneRequiredWithoutTagInput
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    id?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    id?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUpdateManyMutationInput = {
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    id?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    id?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type ImageExtRelationFilter = {
    is?: ImageExtWhereInput | null
    isNot?: ImageExtWhereInput | null
  }

  export type ImageCountOrderByAggregateInput = {
    imgId?: SortOrder
    fileType?: SortOrder
    fileSize?: SortOrder
    dimensionX?: SortOrder
    dimensionY?: SortOrder
    purity?: SortOrder
    category?: SortOrder
    path?: SortOrder
    url?: SortOrder
    source?: SortOrder
    colors?: SortOrder
    desc?: SortOrder
    createdTime?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type ImageAvgOrderByAggregateInput = {
    fileSize?: SortOrder
    dimensionX?: SortOrder
    dimensionY?: SortOrder
  }

  export type ImageMaxOrderByAggregateInput = {
    imgId?: SortOrder
    fileType?: SortOrder
    fileSize?: SortOrder
    dimensionX?: SortOrder
    dimensionY?: SortOrder
    purity?: SortOrder
    category?: SortOrder
    path?: SortOrder
    url?: SortOrder
    source?: SortOrder
    colors?: SortOrder
    desc?: SortOrder
    createdTime?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type ImageMinOrderByAggregateInput = {
    imgId?: SortOrder
    fileType?: SortOrder
    fileSize?: SortOrder
    dimensionX?: SortOrder
    dimensionY?: SortOrder
    purity?: SortOrder
    category?: SortOrder
    path?: SortOrder
    url?: SortOrder
    source?: SortOrder
    colors?: SortOrder
    desc?: SortOrder
    createdTime?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type ImageSumOrderByAggregateInput = {
    fileSize?: SortOrder
    dimensionX?: SortOrder
    dimensionY?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type ImageRelationFilter = {
    is?: ImageWhereInput
    isNot?: ImageWhereInput
  }

  export type DecimalFilter = {
    equals?: Decimal | number | string
    in?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | number | string
    lte?: Decimal | number | string
    gt?: Decimal | number | string
    gte?: Decimal | number | string
    not?: NestedDecimalFilter | Decimal | number | string
  }

  export type AuthorRelationFilter = {
    is?: AuthorWhereInput | null
    isNot?: AuthorWhereInput | null
  }

  export type TagListRelationFilter = {
    every?: TagWhereInput
    some?: TagWhereInput
    none?: TagWhereInput
  }

  export type TagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ImageExtCountOrderByAggregateInput = {
    imgId?: SortOrder
    views?: SortOrder
    favorites?: SortOrder
    ratio?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type ImageExtAvgOrderByAggregateInput = {
    views?: SortOrder
    favorites?: SortOrder
    ratio?: SortOrder
  }

  export type ImageExtMaxOrderByAggregateInput = {
    imgId?: SortOrder
    views?: SortOrder
    favorites?: SortOrder
    ratio?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type ImageExtMinOrderByAggregateInput = {
    imgId?: SortOrder
    views?: SortOrder
    favorites?: SortOrder
    ratio?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type ImageExtSumOrderByAggregateInput = {
    views?: SortOrder
    favorites?: SortOrder
    ratio?: SortOrder
  }

  export type DecimalWithAggregatesFilter = {
    equals?: Decimal | number | string
    in?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | number | string
    lte?: Decimal | number | string
    gt?: Decimal | number | string
    gte?: Decimal | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type AuthorCountOrderByAggregateInput = {
    name?: SortOrder
    id?: SortOrder
    desc?: SortOrder
    type?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type AuthorMaxOrderByAggregateInput = {
    name?: SortOrder
    id?: SortOrder
    desc?: SortOrder
    type?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type AuthorMinOrderByAggregateInput = {
    name?: SortOrder
    id?: SortOrder
    desc?: SortOrder
    type?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type TagCountOrderByAggregateInput = {
    name?: SortOrder
    alias?: SortOrder
    id?: SortOrder
    categoryId?: SortOrder
    category?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    name?: SortOrder
    alias?: SortOrder
    id?: SortOrder
    categoryId?: SortOrder
    category?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    name?: SortOrder
    alias?: SortOrder
    id?: SortOrder
    categoryId?: SortOrder
    category?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type ImageExtCreateNestedOneWithoutImageInput = {
    create?: XOR<ImageExtCreateWithoutImageInput, ImageExtUncheckedCreateWithoutImageInput>
    connectOrCreate?: ImageExtCreateOrConnectWithoutImageInput
    connect?: ImageExtWhereUniqueInput
  }

  export type ImageExtUncheckedCreateNestedOneWithoutImageInput = {
    create?: XOR<ImageExtCreateWithoutImageInput, ImageExtUncheckedCreateWithoutImageInput>
    connectOrCreate?: ImageExtCreateOrConnectWithoutImageInput
    connect?: ImageExtWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ImageExtUpdateOneWithoutImageInput = {
    create?: XOR<ImageExtCreateWithoutImageInput, ImageExtUncheckedCreateWithoutImageInput>
    connectOrCreate?: ImageExtCreateOrConnectWithoutImageInput
    upsert?: ImageExtUpsertWithoutImageInput
    disconnect?: boolean
    delete?: boolean
    connect?: ImageExtWhereUniqueInput
    update?: XOR<ImageExtUpdateWithoutImageInput, ImageExtUncheckedUpdateWithoutImageInput>
  }

  export type ImageExtUncheckedUpdateOneWithoutImageInput = {
    create?: XOR<ImageExtCreateWithoutImageInput, ImageExtUncheckedCreateWithoutImageInput>
    connectOrCreate?: ImageExtCreateOrConnectWithoutImageInput
    upsert?: ImageExtUpsertWithoutImageInput
    disconnect?: boolean
    delete?: boolean
    connect?: ImageExtWhereUniqueInput
    update?: XOR<ImageExtUpdateWithoutImageInput, ImageExtUncheckedUpdateWithoutImageInput>
  }

  export type ImageCreateNestedOneWithoutImageExtInput = {
    create?: XOR<ImageCreateWithoutImageExtInput, ImageUncheckedCreateWithoutImageExtInput>
    connectOrCreate?: ImageCreateOrConnectWithoutImageExtInput
    connect?: ImageWhereUniqueInput
  }

  export type AuthorCreateNestedOneWithoutImageExtInput = {
    create?: XOR<AuthorCreateWithoutImageExtInput, AuthorUncheckedCreateWithoutImageExtInput>
    connectOrCreate?: AuthorCreateOrConnectWithoutImageExtInput
    connect?: AuthorWhereUniqueInput
  }

  export type TagCreateNestedManyWithoutImageExtInput = {
    create?: XOR<Enumerable<TagCreateWithoutImageExtInput>, Enumerable<TagUncheckedCreateWithoutImageExtInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutImageExtInput>
    connect?: Enumerable<TagWhereUniqueInput>
  }

  export type AuthorUncheckedCreateNestedOneWithoutImageExtInput = {
    create?: XOR<AuthorCreateWithoutImageExtInput, AuthorUncheckedCreateWithoutImageExtInput>
    connectOrCreate?: AuthorCreateOrConnectWithoutImageExtInput
    connect?: AuthorWhereUniqueInput
  }

  export type TagUncheckedCreateNestedManyWithoutImageExtInput = {
    create?: XOR<Enumerable<TagCreateWithoutImageExtInput>, Enumerable<TagUncheckedCreateWithoutImageExtInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutImageExtInput>
    connect?: Enumerable<TagWhereUniqueInput>
  }

  export type ImageUpdateOneRequiredWithoutImageExtInput = {
    create?: XOR<ImageCreateWithoutImageExtInput, ImageUncheckedCreateWithoutImageExtInput>
    connectOrCreate?: ImageCreateOrConnectWithoutImageExtInput
    upsert?: ImageUpsertWithoutImageExtInput
    connect?: ImageWhereUniqueInput
    update?: XOR<ImageUpdateWithoutImageExtInput, ImageUncheckedUpdateWithoutImageExtInput>
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | number | string
    increment?: Decimal | number | string
    decrement?: Decimal | number | string
    multiply?: Decimal | number | string
    divide?: Decimal | number | string
  }

  export type AuthorUpdateOneWithoutImageExtInput = {
    create?: XOR<AuthorCreateWithoutImageExtInput, AuthorUncheckedCreateWithoutImageExtInput>
    connectOrCreate?: AuthorCreateOrConnectWithoutImageExtInput
    upsert?: AuthorUpsertWithoutImageExtInput
    disconnect?: boolean
    delete?: boolean
    connect?: AuthorWhereUniqueInput
    update?: XOR<AuthorUpdateWithoutImageExtInput, AuthorUncheckedUpdateWithoutImageExtInput>
  }

  export type TagUpdateManyWithoutImageExtInput = {
    create?: XOR<Enumerable<TagCreateWithoutImageExtInput>, Enumerable<TagUncheckedCreateWithoutImageExtInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutImageExtInput>
    upsert?: Enumerable<TagUpsertWithWhereUniqueWithoutImageExtInput>
    set?: Enumerable<TagWhereUniqueInput>
    disconnect?: Enumerable<TagWhereUniqueInput>
    delete?: Enumerable<TagWhereUniqueInput>
    connect?: Enumerable<TagWhereUniqueInput>
    update?: Enumerable<TagUpdateWithWhereUniqueWithoutImageExtInput>
    updateMany?: Enumerable<TagUpdateManyWithWhereWithoutImageExtInput>
    deleteMany?: Enumerable<TagScalarWhereInput>
  }

  export type AuthorUncheckedUpdateOneWithoutImageExtInput = {
    create?: XOR<AuthorCreateWithoutImageExtInput, AuthorUncheckedCreateWithoutImageExtInput>
    connectOrCreate?: AuthorCreateOrConnectWithoutImageExtInput
    upsert?: AuthorUpsertWithoutImageExtInput
    disconnect?: boolean
    delete?: boolean
    connect?: AuthorWhereUniqueInput
    update?: XOR<AuthorUpdateWithoutImageExtInput, AuthorUncheckedUpdateWithoutImageExtInput>
  }

  export type TagUncheckedUpdateManyWithoutImageExtInput = {
    create?: XOR<Enumerable<TagCreateWithoutImageExtInput>, Enumerable<TagUncheckedCreateWithoutImageExtInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutImageExtInput>
    upsert?: Enumerable<TagUpsertWithWhereUniqueWithoutImageExtInput>
    set?: Enumerable<TagWhereUniqueInput>
    disconnect?: Enumerable<TagWhereUniqueInput>
    delete?: Enumerable<TagWhereUniqueInput>
    connect?: Enumerable<TagWhereUniqueInput>
    update?: Enumerable<TagUpdateWithWhereUniqueWithoutImageExtInput>
    updateMany?: Enumerable<TagUpdateManyWithWhereWithoutImageExtInput>
    deleteMany?: Enumerable<TagScalarWhereInput>
  }

  export type ImageExtCreateNestedOneWithoutAuthorInput = {
    create?: XOR<ImageExtCreateWithoutAuthorInput, ImageExtUncheckedCreateWithoutAuthorInput>
    connectOrCreate?: ImageExtCreateOrConnectWithoutAuthorInput
    connect?: ImageExtWhereUniqueInput
  }

  export type ImageExtUpdateOneRequiredWithoutAuthorInput = {
    create?: XOR<ImageExtCreateWithoutAuthorInput, ImageExtUncheckedCreateWithoutAuthorInput>
    connectOrCreate?: ImageExtCreateOrConnectWithoutAuthorInput
    upsert?: ImageExtUpsertWithoutAuthorInput
    connect?: ImageExtWhereUniqueInput
    update?: XOR<ImageExtUpdateWithoutAuthorInput, ImageExtUncheckedUpdateWithoutAuthorInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ImageExtCreateNestedOneWithoutTagInput = {
    create?: XOR<ImageExtCreateWithoutTagInput, ImageExtUncheckedCreateWithoutTagInput>
    connectOrCreate?: ImageExtCreateOrConnectWithoutTagInput
    connect?: ImageExtWhereUniqueInput
  }

  export type ImageExtUpdateOneRequiredWithoutTagInput = {
    create?: XOR<ImageExtCreateWithoutTagInput, ImageExtUncheckedCreateWithoutTagInput>
    connectOrCreate?: ImageExtCreateOrConnectWithoutTagInput
    upsert?: ImageExtUpsertWithoutTagInput
    connect?: ImageExtWhereUniqueInput
    update?: XOR<ImageExtUpdateWithoutTagInput, ImageExtUncheckedUpdateWithoutTagInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedDecimalFilter = {
    equals?: Decimal | number | string
    in?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | number | string
    lte?: Decimal | number | string
    gt?: Decimal | number | string
    gte?: Decimal | number | string
    not?: NestedDecimalFilter | Decimal | number | string
  }

  export type NestedDecimalWithAggregatesFilter = {
    equals?: Decimal | number | string
    in?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | number | string
    lte?: Decimal | number | string
    gt?: Decimal | number | string
    gte?: Decimal | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type ImageExtCreateWithoutImageInput = {
    views: number
    favorites: number
    ratio: Decimal | number | string
    createAt: Date | string
    updateAt: Date | string
    author?: AuthorCreateNestedOneWithoutImageExtInput
    tag?: TagCreateNestedManyWithoutImageExtInput
  }

  export type ImageExtUncheckedCreateWithoutImageInput = {
    views: number
    favorites: number
    ratio: Decimal | number | string
    createAt: Date | string
    updateAt: Date | string
    author?: AuthorUncheckedCreateNestedOneWithoutImageExtInput
    tag?: TagUncheckedCreateNestedManyWithoutImageExtInput
  }

  export type ImageExtCreateOrConnectWithoutImageInput = {
    where: ImageExtWhereUniqueInput
    create: XOR<ImageExtCreateWithoutImageInput, ImageExtUncheckedCreateWithoutImageInput>
  }

  export type ImageExtUpsertWithoutImageInput = {
    update: XOR<ImageExtUpdateWithoutImageInput, ImageExtUncheckedUpdateWithoutImageInput>
    create: XOR<ImageExtCreateWithoutImageInput, ImageExtUncheckedCreateWithoutImageInput>
  }

  export type ImageExtUpdateWithoutImageInput = {
    views?: IntFieldUpdateOperationsInput | number
    favorites?: IntFieldUpdateOperationsInput | number
    ratio?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: AuthorUpdateOneWithoutImageExtInput
    tag?: TagUpdateManyWithoutImageExtInput
  }

  export type ImageExtUncheckedUpdateWithoutImageInput = {
    views?: IntFieldUpdateOperationsInput | number
    favorites?: IntFieldUpdateOperationsInput | number
    ratio?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: AuthorUncheckedUpdateOneWithoutImageExtInput
    tag?: TagUncheckedUpdateManyWithoutImageExtInput
  }

  export type ImageCreateWithoutImageExtInput = {
    imgId: string
    fileType: string
    fileSize: number
    dimensionX: number
    dimensionY: number
    purity: string
    category: string
    path: string
    url: string
    source: string
    colors: string
    desc: string
    createdTime: Date | string
    createAt?: Date | string
    updateAt: Date | string
  }

  export type ImageUncheckedCreateWithoutImageExtInput = {
    imgId: string
    fileType: string
    fileSize: number
    dimensionX: number
    dimensionY: number
    purity: string
    category: string
    path: string
    url: string
    source: string
    colors: string
    desc: string
    createdTime: Date | string
    createAt?: Date | string
    updateAt: Date | string
  }

  export type ImageCreateOrConnectWithoutImageExtInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutImageExtInput, ImageUncheckedCreateWithoutImageExtInput>
  }

  export type AuthorCreateWithoutImageExtInput = {
    id?: string | null
    desc: string
    type: string
    createAt?: Date | string
    updateAt: Date | string
  }

  export type AuthorUncheckedCreateWithoutImageExtInput = {
    id?: string | null
    desc: string
    type: string
    createAt?: Date | string
    updateAt: Date | string
  }

  export type AuthorCreateOrConnectWithoutImageExtInput = {
    where: AuthorWhereUniqueInput
    create: XOR<AuthorCreateWithoutImageExtInput, AuthorUncheckedCreateWithoutImageExtInput>
  }

  export type TagCreateWithoutImageExtInput = {
    alias?: string | null
    id?: string | null
    categoryId: string
    category: string
    createAt?: Date | string
    updateAt: Date | string
  }

  export type TagUncheckedCreateWithoutImageExtInput = {
    alias?: string | null
    id?: string | null
    categoryId: string
    category: string
    createAt?: Date | string
    updateAt: Date | string
  }

  export type TagCreateOrConnectWithoutImageExtInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutImageExtInput, TagUncheckedCreateWithoutImageExtInput>
  }

  export type ImageUpsertWithoutImageExtInput = {
    update: XOR<ImageUpdateWithoutImageExtInput, ImageUncheckedUpdateWithoutImageExtInput>
    create: XOR<ImageCreateWithoutImageExtInput, ImageUncheckedCreateWithoutImageExtInput>
  }

  export type ImageUpdateWithoutImageExtInput = {
    imgId?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    dimensionX?: IntFieldUpdateOperationsInput | number
    dimensionY?: IntFieldUpdateOperationsInput | number
    purity?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    createdTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageUncheckedUpdateWithoutImageExtInput = {
    imgId?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    dimensionX?: IntFieldUpdateOperationsInput | number
    dimensionY?: IntFieldUpdateOperationsInput | number
    purity?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    createdTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthorUpsertWithoutImageExtInput = {
    update: XOR<AuthorUpdateWithoutImageExtInput, AuthorUncheckedUpdateWithoutImageExtInput>
    create: XOR<AuthorCreateWithoutImageExtInput, AuthorUncheckedCreateWithoutImageExtInput>
  }

  export type AuthorUpdateWithoutImageExtInput = {
    id?: NullableStringFieldUpdateOperationsInput | string | null
    desc?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthorUncheckedUpdateWithoutImageExtInput = {
    id?: NullableStringFieldUpdateOperationsInput | string | null
    desc?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUpsertWithWhereUniqueWithoutImageExtInput = {
    where: TagWhereUniqueInput
    update: XOR<TagUpdateWithoutImageExtInput, TagUncheckedUpdateWithoutImageExtInput>
    create: XOR<TagCreateWithoutImageExtInput, TagUncheckedCreateWithoutImageExtInput>
  }

  export type TagUpdateWithWhereUniqueWithoutImageExtInput = {
    where: TagWhereUniqueInput
    data: XOR<TagUpdateWithoutImageExtInput, TagUncheckedUpdateWithoutImageExtInput>
  }

  export type TagUpdateManyWithWhereWithoutImageExtInput = {
    where: TagScalarWhereInput
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyWithoutTagInput>
  }

  export type TagScalarWhereInput = {
    AND?: Enumerable<TagScalarWhereInput>
    OR?: Enumerable<TagScalarWhereInput>
    NOT?: Enumerable<TagScalarWhereInput>
    name?: StringFilter | string
    alias?: StringNullableFilter | string | null
    id?: StringNullableFilter | string | null
    categoryId?: StringFilter | string
    category?: StringFilter | string
    createAt?: DateTimeFilter | Date | string
    updateAt?: DateTimeFilter | Date | string
  }

  export type ImageExtCreateWithoutAuthorInput = {
    image: ImageCreateNestedOneWithoutImageExtInput
    views: number
    favorites: number
    ratio: Decimal | number | string
    createAt: Date | string
    updateAt: Date | string
    tag?: TagCreateNestedManyWithoutImageExtInput
  }

  export type ImageExtUncheckedCreateWithoutAuthorInput = {
    imgId: string
    views: number
    favorites: number
    ratio: Decimal | number | string
    createAt: Date | string
    updateAt: Date | string
    tag?: TagUncheckedCreateNestedManyWithoutImageExtInput
  }

  export type ImageExtCreateOrConnectWithoutAuthorInput = {
    where: ImageExtWhereUniqueInput
    create: XOR<ImageExtCreateWithoutAuthorInput, ImageExtUncheckedCreateWithoutAuthorInput>
  }

  export type ImageExtUpsertWithoutAuthorInput = {
    update: XOR<ImageExtUpdateWithoutAuthorInput, ImageExtUncheckedUpdateWithoutAuthorInput>
    create: XOR<ImageExtCreateWithoutAuthorInput, ImageExtUncheckedCreateWithoutAuthorInput>
  }

  export type ImageExtUpdateWithoutAuthorInput = {
    image?: ImageUpdateOneRequiredWithoutImageExtInput
    views?: IntFieldUpdateOperationsInput | number
    favorites?: IntFieldUpdateOperationsInput | number
    ratio?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tag?: TagUpdateManyWithoutImageExtInput
  }

  export type ImageExtUncheckedUpdateWithoutAuthorInput = {
    imgId?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    favorites?: IntFieldUpdateOperationsInput | number
    ratio?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tag?: TagUncheckedUpdateManyWithoutImageExtInput
  }

  export type ImageExtCreateWithoutTagInput = {
    image: ImageCreateNestedOneWithoutImageExtInput
    views: number
    favorites: number
    ratio: Decimal | number | string
    createAt: Date | string
    updateAt: Date | string
    author?: AuthorCreateNestedOneWithoutImageExtInput
  }

  export type ImageExtUncheckedCreateWithoutTagInput = {
    imgId: string
    views: number
    favorites: number
    ratio: Decimal | number | string
    createAt: Date | string
    updateAt: Date | string
    author?: AuthorUncheckedCreateNestedOneWithoutImageExtInput
  }

  export type ImageExtCreateOrConnectWithoutTagInput = {
    where: ImageExtWhereUniqueInput
    create: XOR<ImageExtCreateWithoutTagInput, ImageExtUncheckedCreateWithoutTagInput>
  }

  export type ImageExtUpsertWithoutTagInput = {
    update: XOR<ImageExtUpdateWithoutTagInput, ImageExtUncheckedUpdateWithoutTagInput>
    create: XOR<ImageExtCreateWithoutTagInput, ImageExtUncheckedCreateWithoutTagInput>
  }

  export type ImageExtUpdateWithoutTagInput = {
    image?: ImageUpdateOneRequiredWithoutImageExtInput
    views?: IntFieldUpdateOperationsInput | number
    favorites?: IntFieldUpdateOperationsInput | number
    ratio?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: AuthorUpdateOneWithoutImageExtInput
  }

  export type ImageExtUncheckedUpdateWithoutTagInput = {
    imgId?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    favorites?: IntFieldUpdateOperationsInput | number
    ratio?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: AuthorUncheckedUpdateOneWithoutImageExtInput
  }

  export type TagUpdateWithoutImageExtInput = {
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    id?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUncheckedUpdateWithoutImageExtInput = {
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    id?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUncheckedUpdateManyWithoutTagInput = {
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    id?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}