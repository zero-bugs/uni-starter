
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model tbl_img
 * 
 */
export type tbl_img = {
  id: string
  file_type: string
  file_size: number
  dimension_x: number
  dimension_y: number
  purity: string
  category: string
  path: string
  url: string
  source: string
  colors: string
  desc: string
  created_time: Date
  create_at: Date
  update_at: Date
}

/**
 * Model tbl_img_ext
 * 
 */
export type tbl_img_ext = {
  id: string
  views: number
  favorites: number
  ratio: Prisma.Decimal
  tags: string
  author_name: string
  author_id: string
  artist_name: string
  artist_id: string
  create_at: Date
  update_at: Date
}

/**
 * Model tbl_author
 * 
 */
export type tbl_author = {
  name: string
  id: string
  desc: string
  type: string
  create_at: Date
  update_at: Date
}

/**
 * Model tbl_tag
 * 
 */
export type tbl_tag = {
  name: string
  alias: string
  id: string
  category_id: string
  category: string
  create_at: Date
  update_at: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Tbl_imgs
 * const tbl_imgs = await prisma.tbl_img.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Tbl_imgs
   * const tbl_imgs = await prisma.tbl_img.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.tbl_img`: Exposes CRUD operations for the **tbl_img** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tbl_imgs
    * const tbl_imgs = await prisma.tbl_img.findMany()
    * ```
    */
  get tbl_img(): Prisma.tbl_imgDelegate<GlobalReject>;

  /**
   * `prisma.tbl_img_ext`: Exposes CRUD operations for the **tbl_img_ext** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tbl_img_exts
    * const tbl_img_exts = await prisma.tbl_img_ext.findMany()
    * ```
    */
  get tbl_img_ext(): Prisma.tbl_img_extDelegate<GlobalReject>;

  /**
   * `prisma.tbl_author`: Exposes CRUD operations for the **tbl_author** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tbl_authors
    * const tbl_authors = await prisma.tbl_author.findMany()
    * ```
    */
  get tbl_author(): Prisma.tbl_authorDelegate<GlobalReject>;

  /**
   * `prisma.tbl_tag`: Exposes CRUD operations for the **tbl_tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tbl_tags
    * const tbl_tags = await prisma.tbl_tag.findMany()
    * ```
    */
  get tbl_tag(): Prisma.tbl_tagDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.10.0
   * Query Engine version: 73e60b76d394f8d37d8ebd1f8918c79029f0db86
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    tbl_img: 'tbl_img',
    tbl_img_ext: 'tbl_img_ext',
    tbl_author: 'tbl_author',
    tbl_tag: 'tbl_tag'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model tbl_img
   */


  export type AggregateTbl_img = {
    _count: Tbl_imgCountAggregateOutputType | null
    _avg: Tbl_imgAvgAggregateOutputType | null
    _sum: Tbl_imgSumAggregateOutputType | null
    _min: Tbl_imgMinAggregateOutputType | null
    _max: Tbl_imgMaxAggregateOutputType | null
  }

  export type Tbl_imgAvgAggregateOutputType = {
    file_size: number | null
    dimension_x: number | null
    dimension_y: number | null
  }

  export type Tbl_imgSumAggregateOutputType = {
    file_size: number | null
    dimension_x: number | null
    dimension_y: number | null
  }

  export type Tbl_imgMinAggregateOutputType = {
    id: string | null
    file_type: string | null
    file_size: number | null
    dimension_x: number | null
    dimension_y: number | null
    purity: string | null
    category: string | null
    path: string | null
    url: string | null
    source: string | null
    colors: string | null
    desc: string | null
    created_time: Date | null
    create_at: Date | null
    update_at: Date | null
  }

  export type Tbl_imgMaxAggregateOutputType = {
    id: string | null
    file_type: string | null
    file_size: number | null
    dimension_x: number | null
    dimension_y: number | null
    purity: string | null
    category: string | null
    path: string | null
    url: string | null
    source: string | null
    colors: string | null
    desc: string | null
    created_time: Date | null
    create_at: Date | null
    update_at: Date | null
  }

  export type Tbl_imgCountAggregateOutputType = {
    id: number
    file_type: number
    file_size: number
    dimension_x: number
    dimension_y: number
    purity: number
    category: number
    path: number
    url: number
    source: number
    colors: number
    desc: number
    created_time: number
    create_at: number
    update_at: number
    _all: number
  }


  export type Tbl_imgAvgAggregateInputType = {
    file_size?: true
    dimension_x?: true
    dimension_y?: true
  }

  export type Tbl_imgSumAggregateInputType = {
    file_size?: true
    dimension_x?: true
    dimension_y?: true
  }

  export type Tbl_imgMinAggregateInputType = {
    id?: true
    file_type?: true
    file_size?: true
    dimension_x?: true
    dimension_y?: true
    purity?: true
    category?: true
    path?: true
    url?: true
    source?: true
    colors?: true
    desc?: true
    created_time?: true
    create_at?: true
    update_at?: true
  }

  export type Tbl_imgMaxAggregateInputType = {
    id?: true
    file_type?: true
    file_size?: true
    dimension_x?: true
    dimension_y?: true
    purity?: true
    category?: true
    path?: true
    url?: true
    source?: true
    colors?: true
    desc?: true
    created_time?: true
    create_at?: true
    update_at?: true
  }

  export type Tbl_imgCountAggregateInputType = {
    id?: true
    file_type?: true
    file_size?: true
    dimension_x?: true
    dimension_y?: true
    purity?: true
    category?: true
    path?: true
    url?: true
    source?: true
    colors?: true
    desc?: true
    created_time?: true
    create_at?: true
    update_at?: true
    _all?: true
  }

  export type Tbl_imgAggregateArgs = {
    /**
     * Filter which tbl_img to aggregate.
     * 
    **/
    where?: tbl_imgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_imgs to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_imgOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: tbl_imgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_imgs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_imgs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbl_imgs
    **/
    _count?: true | Tbl_imgCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Tbl_imgAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Tbl_imgSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Tbl_imgMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Tbl_imgMaxAggregateInputType
  }

  export type GetTbl_imgAggregateType<T extends Tbl_imgAggregateArgs> = {
        [P in keyof T & keyof AggregateTbl_img]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbl_img[P]>
      : GetScalarType<T[P], AggregateTbl_img[P]>
  }




  export type Tbl_imgGroupByArgs = {
    where?: tbl_imgWhereInput
    orderBy?: Enumerable<tbl_imgOrderByWithAggregationInput>
    by: Array<Tbl_imgScalarFieldEnum>
    having?: tbl_imgScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Tbl_imgCountAggregateInputType | true
    _avg?: Tbl_imgAvgAggregateInputType
    _sum?: Tbl_imgSumAggregateInputType
    _min?: Tbl_imgMinAggregateInputType
    _max?: Tbl_imgMaxAggregateInputType
  }


  export type Tbl_imgGroupByOutputType = {
    id: string
    file_type: string
    file_size: number
    dimension_x: number
    dimension_y: number
    purity: string
    category: string
    path: string
    url: string
    source: string
    colors: string
    desc: string
    created_time: Date
    create_at: Date
    update_at: Date
    _count: Tbl_imgCountAggregateOutputType | null
    _avg: Tbl_imgAvgAggregateOutputType | null
    _sum: Tbl_imgSumAggregateOutputType | null
    _min: Tbl_imgMinAggregateOutputType | null
    _max: Tbl_imgMaxAggregateOutputType | null
  }

  type GetTbl_imgGroupByPayload<T extends Tbl_imgGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Tbl_imgGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Tbl_imgGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Tbl_imgGroupByOutputType[P]>
            : GetScalarType<T[P], Tbl_imgGroupByOutputType[P]>
        }
      >
    >


  export type tbl_imgSelect = {
    id?: boolean
    file_type?: boolean
    file_size?: boolean
    dimension_x?: boolean
    dimension_y?: boolean
    purity?: boolean
    category?: boolean
    path?: boolean
    url?: boolean
    source?: boolean
    colors?: boolean
    desc?: boolean
    created_time?: boolean
    create_at?: boolean
    update_at?: boolean
  }

  export type tbl_imgGetPayload<
    S extends boolean | null | undefined | tbl_imgArgs,
    U = keyof S
      > = S extends true
        ? tbl_img
    : S extends undefined
    ? never
    : S extends tbl_imgArgs | tbl_imgFindManyArgs
    ?'include' extends U
    ? tbl_img 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof tbl_img ? tbl_img[P] : never
  } 
    : tbl_img
  : tbl_img


  type tbl_imgCountArgs = Merge<
    Omit<tbl_imgFindManyArgs, 'select' | 'include'> & {
      select?: Tbl_imgCountAggregateInputType | true
    }
  >

  export interface tbl_imgDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Tbl_img that matches the filter.
     * @param {tbl_imgFindUniqueArgs} args - Arguments to find a Tbl_img
     * @example
     * // Get one Tbl_img
     * const tbl_img = await prisma.tbl_img.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbl_imgFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbl_imgFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbl_img'> extends True ? CheckSelect<T, Prisma__tbl_imgClient<tbl_img>, Prisma__tbl_imgClient<tbl_imgGetPayload<T>>> : CheckSelect<T, Prisma__tbl_imgClient<tbl_img | null >, Prisma__tbl_imgClient<tbl_imgGetPayload<T> | null >>

    /**
     * Find the first Tbl_img that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_imgFindFirstArgs} args - Arguments to find a Tbl_img
     * @example
     * // Get one Tbl_img
     * const tbl_img = await prisma.tbl_img.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbl_imgFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbl_imgFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbl_img'> extends True ? CheckSelect<T, Prisma__tbl_imgClient<tbl_img>, Prisma__tbl_imgClient<tbl_imgGetPayload<T>>> : CheckSelect<T, Prisma__tbl_imgClient<tbl_img | null >, Prisma__tbl_imgClient<tbl_imgGetPayload<T> | null >>

    /**
     * Find zero or more Tbl_imgs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_imgFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tbl_imgs
     * const tbl_imgs = await prisma.tbl_img.findMany()
     * 
     * // Get first 10 Tbl_imgs
     * const tbl_imgs = await prisma.tbl_img.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tbl_imgWithIdOnly = await prisma.tbl_img.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends tbl_imgFindManyArgs>(
      args?: SelectSubset<T, tbl_imgFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<tbl_img>>, PrismaPromise<Array<tbl_imgGetPayload<T>>>>

    /**
     * Create a Tbl_img.
     * @param {tbl_imgCreateArgs} args - Arguments to create a Tbl_img.
     * @example
     * // Create one Tbl_img
     * const Tbl_img = await prisma.tbl_img.create({
     *   data: {
     *     // ... data to create a Tbl_img
     *   }
     * })
     * 
    **/
    create<T extends tbl_imgCreateArgs>(
      args: SelectSubset<T, tbl_imgCreateArgs>
    ): CheckSelect<T, Prisma__tbl_imgClient<tbl_img>, Prisma__tbl_imgClient<tbl_imgGetPayload<T>>>

    /**
     * Delete a Tbl_img.
     * @param {tbl_imgDeleteArgs} args - Arguments to delete one Tbl_img.
     * @example
     * // Delete one Tbl_img
     * const Tbl_img = await prisma.tbl_img.delete({
     *   where: {
     *     // ... filter to delete one Tbl_img
     *   }
     * })
     * 
    **/
    delete<T extends tbl_imgDeleteArgs>(
      args: SelectSubset<T, tbl_imgDeleteArgs>
    ): CheckSelect<T, Prisma__tbl_imgClient<tbl_img>, Prisma__tbl_imgClient<tbl_imgGetPayload<T>>>

    /**
     * Update one Tbl_img.
     * @param {tbl_imgUpdateArgs} args - Arguments to update one Tbl_img.
     * @example
     * // Update one Tbl_img
     * const tbl_img = await prisma.tbl_img.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbl_imgUpdateArgs>(
      args: SelectSubset<T, tbl_imgUpdateArgs>
    ): CheckSelect<T, Prisma__tbl_imgClient<tbl_img>, Prisma__tbl_imgClient<tbl_imgGetPayload<T>>>

    /**
     * Delete zero or more Tbl_imgs.
     * @param {tbl_imgDeleteManyArgs} args - Arguments to filter Tbl_imgs to delete.
     * @example
     * // Delete a few Tbl_imgs
     * const { count } = await prisma.tbl_img.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbl_imgDeleteManyArgs>(
      args?: SelectSubset<T, tbl_imgDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tbl_imgs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_imgUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tbl_imgs
     * const tbl_img = await prisma.tbl_img.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbl_imgUpdateManyArgs>(
      args: SelectSubset<T, tbl_imgUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tbl_img.
     * @param {tbl_imgUpsertArgs} args - Arguments to update or create a Tbl_img.
     * @example
     * // Update or create a Tbl_img
     * const tbl_img = await prisma.tbl_img.upsert({
     *   create: {
     *     // ... data to create a Tbl_img
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tbl_img we want to update
     *   }
     * })
    **/
    upsert<T extends tbl_imgUpsertArgs>(
      args: SelectSubset<T, tbl_imgUpsertArgs>
    ): CheckSelect<T, Prisma__tbl_imgClient<tbl_img>, Prisma__tbl_imgClient<tbl_imgGetPayload<T>>>

    /**
     * Count the number of Tbl_imgs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_imgCountArgs} args - Arguments to filter Tbl_imgs to count.
     * @example
     * // Count the number of Tbl_imgs
     * const count = await prisma.tbl_img.count({
     *   where: {
     *     // ... the filter for the Tbl_imgs we want to count
     *   }
     * })
    **/
    count<T extends tbl_imgCountArgs>(
      args?: Subset<T, tbl_imgCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Tbl_imgCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tbl_img.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tbl_imgAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Tbl_imgAggregateArgs>(args: Subset<T, Tbl_imgAggregateArgs>): PrismaPromise<GetTbl_imgAggregateType<T>>

    /**
     * Group by Tbl_img.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tbl_imgGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Tbl_imgGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Tbl_imgGroupByArgs['orderBy'] }
        : { orderBy?: Tbl_imgGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Tbl_imgGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbl_imgGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for tbl_img.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbl_imgClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * tbl_img findUnique
   */
  export type tbl_imgFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the tbl_img
     * 
    **/
    select?: tbl_imgSelect | null
    /**
     * Throw an Error if a tbl_img can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tbl_img to fetch.
     * 
    **/
    where: tbl_imgWhereUniqueInput
  }


  /**
   * tbl_img findFirst
   */
  export type tbl_imgFindFirstArgs = {
    /**
     * Select specific fields to fetch from the tbl_img
     * 
    **/
    select?: tbl_imgSelect | null
    /**
     * Throw an Error if a tbl_img can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tbl_img to fetch.
     * 
    **/
    where?: tbl_imgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_imgs to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_imgOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbl_imgs.
     * 
    **/
    cursor?: tbl_imgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_imgs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_imgs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbl_imgs.
     * 
    **/
    distinct?: Enumerable<Tbl_imgScalarFieldEnum>
  }


  /**
   * tbl_img findMany
   */
  export type tbl_imgFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbl_img
     * 
    **/
    select?: tbl_imgSelect | null
    /**
     * Filter, which tbl_imgs to fetch.
     * 
    **/
    where?: tbl_imgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_imgs to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_imgOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbl_imgs.
     * 
    **/
    cursor?: tbl_imgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_imgs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_imgs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Tbl_imgScalarFieldEnum>
  }


  /**
   * tbl_img create
   */
  export type tbl_imgCreateArgs = {
    /**
     * Select specific fields to fetch from the tbl_img
     * 
    **/
    select?: tbl_imgSelect | null
    /**
     * The data needed to create a tbl_img.
     * 
    **/
    data: XOR<tbl_imgCreateInput, tbl_imgUncheckedCreateInput>
  }


  /**
   * tbl_img update
   */
  export type tbl_imgUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbl_img
     * 
    **/
    select?: tbl_imgSelect | null
    /**
     * The data needed to update a tbl_img.
     * 
    **/
    data: XOR<tbl_imgUpdateInput, tbl_imgUncheckedUpdateInput>
    /**
     * Choose, which tbl_img to update.
     * 
    **/
    where: tbl_imgWhereUniqueInput
  }


  /**
   * tbl_img updateMany
   */
  export type tbl_imgUpdateManyArgs = {
    /**
     * The data used to update tbl_imgs.
     * 
    **/
    data: XOR<tbl_imgUpdateManyMutationInput, tbl_imgUncheckedUpdateManyInput>
    /**
     * Filter which tbl_imgs to update
     * 
    **/
    where?: tbl_imgWhereInput
  }


  /**
   * tbl_img upsert
   */
  export type tbl_imgUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbl_img
     * 
    **/
    select?: tbl_imgSelect | null
    /**
     * The filter to search for the tbl_img to update in case it exists.
     * 
    **/
    where: tbl_imgWhereUniqueInput
    /**
     * In case the tbl_img found by the `where` argument doesn't exist, create a new tbl_img with this data.
     * 
    **/
    create: XOR<tbl_imgCreateInput, tbl_imgUncheckedCreateInput>
    /**
     * In case the tbl_img was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<tbl_imgUpdateInput, tbl_imgUncheckedUpdateInput>
  }


  /**
   * tbl_img delete
   */
  export type tbl_imgDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbl_img
     * 
    **/
    select?: tbl_imgSelect | null
    /**
     * Filter which tbl_img to delete.
     * 
    **/
    where: tbl_imgWhereUniqueInput
  }


  /**
   * tbl_img deleteMany
   */
  export type tbl_imgDeleteManyArgs = {
    /**
     * Filter which tbl_imgs to delete
     * 
    **/
    where?: tbl_imgWhereInput
  }


  /**
   * tbl_img without action
   */
  export type tbl_imgArgs = {
    /**
     * Select specific fields to fetch from the tbl_img
     * 
    **/
    select?: tbl_imgSelect | null
  }



  /**
   * Model tbl_img_ext
   */


  export type AggregateTbl_img_ext = {
    _count: Tbl_img_extCountAggregateOutputType | null
    _avg: Tbl_img_extAvgAggregateOutputType | null
    _sum: Tbl_img_extSumAggregateOutputType | null
    _min: Tbl_img_extMinAggregateOutputType | null
    _max: Tbl_img_extMaxAggregateOutputType | null
  }

  export type Tbl_img_extAvgAggregateOutputType = {
    views: number | null
    favorites: number | null
    ratio: Decimal | null
  }

  export type Tbl_img_extSumAggregateOutputType = {
    views: number | null
    favorites: number | null
    ratio: Decimal | null
  }

  export type Tbl_img_extMinAggregateOutputType = {
    id: string | null
    views: number | null
    favorites: number | null
    ratio: Decimal | null
    tags: string | null
    author_name: string | null
    author_id: string | null
    artist_name: string | null
    artist_id: string | null
    create_at: Date | null
    update_at: Date | null
  }

  export type Tbl_img_extMaxAggregateOutputType = {
    id: string | null
    views: number | null
    favorites: number | null
    ratio: Decimal | null
    tags: string | null
    author_name: string | null
    author_id: string | null
    artist_name: string | null
    artist_id: string | null
    create_at: Date | null
    update_at: Date | null
  }

  export type Tbl_img_extCountAggregateOutputType = {
    id: number
    views: number
    favorites: number
    ratio: number
    tags: number
    author_name: number
    author_id: number
    artist_name: number
    artist_id: number
    create_at: number
    update_at: number
    _all: number
  }


  export type Tbl_img_extAvgAggregateInputType = {
    views?: true
    favorites?: true
    ratio?: true
  }

  export type Tbl_img_extSumAggregateInputType = {
    views?: true
    favorites?: true
    ratio?: true
  }

  export type Tbl_img_extMinAggregateInputType = {
    id?: true
    views?: true
    favorites?: true
    ratio?: true
    tags?: true
    author_name?: true
    author_id?: true
    artist_name?: true
    artist_id?: true
    create_at?: true
    update_at?: true
  }

  export type Tbl_img_extMaxAggregateInputType = {
    id?: true
    views?: true
    favorites?: true
    ratio?: true
    tags?: true
    author_name?: true
    author_id?: true
    artist_name?: true
    artist_id?: true
    create_at?: true
    update_at?: true
  }

  export type Tbl_img_extCountAggregateInputType = {
    id?: true
    views?: true
    favorites?: true
    ratio?: true
    tags?: true
    author_name?: true
    author_id?: true
    artist_name?: true
    artist_id?: true
    create_at?: true
    update_at?: true
    _all?: true
  }

  export type Tbl_img_extAggregateArgs = {
    /**
     * Filter which tbl_img_ext to aggregate.
     * 
    **/
    where?: tbl_img_extWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_img_exts to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_img_extOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: tbl_img_extWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_img_exts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_img_exts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbl_img_exts
    **/
    _count?: true | Tbl_img_extCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Tbl_img_extAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Tbl_img_extSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Tbl_img_extMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Tbl_img_extMaxAggregateInputType
  }

  export type GetTbl_img_extAggregateType<T extends Tbl_img_extAggregateArgs> = {
        [P in keyof T & keyof AggregateTbl_img_ext]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbl_img_ext[P]>
      : GetScalarType<T[P], AggregateTbl_img_ext[P]>
  }




  export type Tbl_img_extGroupByArgs = {
    where?: tbl_img_extWhereInput
    orderBy?: Enumerable<tbl_img_extOrderByWithAggregationInput>
    by: Array<Tbl_img_extScalarFieldEnum>
    having?: tbl_img_extScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Tbl_img_extCountAggregateInputType | true
    _avg?: Tbl_img_extAvgAggregateInputType
    _sum?: Tbl_img_extSumAggregateInputType
    _min?: Tbl_img_extMinAggregateInputType
    _max?: Tbl_img_extMaxAggregateInputType
  }


  export type Tbl_img_extGroupByOutputType = {
    id: string
    views: number
    favorites: number
    ratio: Decimal
    tags: string
    author_name: string
    author_id: string
    artist_name: string
    artist_id: string
    create_at: Date
    update_at: Date
    _count: Tbl_img_extCountAggregateOutputType | null
    _avg: Tbl_img_extAvgAggregateOutputType | null
    _sum: Tbl_img_extSumAggregateOutputType | null
    _min: Tbl_img_extMinAggregateOutputType | null
    _max: Tbl_img_extMaxAggregateOutputType | null
  }

  type GetTbl_img_extGroupByPayload<T extends Tbl_img_extGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Tbl_img_extGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Tbl_img_extGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Tbl_img_extGroupByOutputType[P]>
            : GetScalarType<T[P], Tbl_img_extGroupByOutputType[P]>
        }
      >
    >


  export type tbl_img_extSelect = {
    id?: boolean
    views?: boolean
    favorites?: boolean
    ratio?: boolean
    tags?: boolean
    author_name?: boolean
    author_id?: boolean
    artist_name?: boolean
    artist_id?: boolean
    create_at?: boolean
    update_at?: boolean
  }

  export type tbl_img_extGetPayload<
    S extends boolean | null | undefined | tbl_img_extArgs,
    U = keyof S
      > = S extends true
        ? tbl_img_ext
    : S extends undefined
    ? never
    : S extends tbl_img_extArgs | tbl_img_extFindManyArgs
    ?'include' extends U
    ? tbl_img_ext 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof tbl_img_ext ? tbl_img_ext[P] : never
  } 
    : tbl_img_ext
  : tbl_img_ext


  type tbl_img_extCountArgs = Merge<
    Omit<tbl_img_extFindManyArgs, 'select' | 'include'> & {
      select?: Tbl_img_extCountAggregateInputType | true
    }
  >

  export interface tbl_img_extDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Tbl_img_ext that matches the filter.
     * @param {tbl_img_extFindUniqueArgs} args - Arguments to find a Tbl_img_ext
     * @example
     * // Get one Tbl_img_ext
     * const tbl_img_ext = await prisma.tbl_img_ext.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbl_img_extFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbl_img_extFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbl_img_ext'> extends True ? CheckSelect<T, Prisma__tbl_img_extClient<tbl_img_ext>, Prisma__tbl_img_extClient<tbl_img_extGetPayload<T>>> : CheckSelect<T, Prisma__tbl_img_extClient<tbl_img_ext | null >, Prisma__tbl_img_extClient<tbl_img_extGetPayload<T> | null >>

    /**
     * Find the first Tbl_img_ext that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_img_extFindFirstArgs} args - Arguments to find a Tbl_img_ext
     * @example
     * // Get one Tbl_img_ext
     * const tbl_img_ext = await prisma.tbl_img_ext.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbl_img_extFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbl_img_extFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbl_img_ext'> extends True ? CheckSelect<T, Prisma__tbl_img_extClient<tbl_img_ext>, Prisma__tbl_img_extClient<tbl_img_extGetPayload<T>>> : CheckSelect<T, Prisma__tbl_img_extClient<tbl_img_ext | null >, Prisma__tbl_img_extClient<tbl_img_extGetPayload<T> | null >>

    /**
     * Find zero or more Tbl_img_exts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_img_extFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tbl_img_exts
     * const tbl_img_exts = await prisma.tbl_img_ext.findMany()
     * 
     * // Get first 10 Tbl_img_exts
     * const tbl_img_exts = await prisma.tbl_img_ext.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tbl_img_extWithIdOnly = await prisma.tbl_img_ext.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends tbl_img_extFindManyArgs>(
      args?: SelectSubset<T, tbl_img_extFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<tbl_img_ext>>, PrismaPromise<Array<tbl_img_extGetPayload<T>>>>

    /**
     * Create a Tbl_img_ext.
     * @param {tbl_img_extCreateArgs} args - Arguments to create a Tbl_img_ext.
     * @example
     * // Create one Tbl_img_ext
     * const Tbl_img_ext = await prisma.tbl_img_ext.create({
     *   data: {
     *     // ... data to create a Tbl_img_ext
     *   }
     * })
     * 
    **/
    create<T extends tbl_img_extCreateArgs>(
      args: SelectSubset<T, tbl_img_extCreateArgs>
    ): CheckSelect<T, Prisma__tbl_img_extClient<tbl_img_ext>, Prisma__tbl_img_extClient<tbl_img_extGetPayload<T>>>

    /**
     * Delete a Tbl_img_ext.
     * @param {tbl_img_extDeleteArgs} args - Arguments to delete one Tbl_img_ext.
     * @example
     * // Delete one Tbl_img_ext
     * const Tbl_img_ext = await prisma.tbl_img_ext.delete({
     *   where: {
     *     // ... filter to delete one Tbl_img_ext
     *   }
     * })
     * 
    **/
    delete<T extends tbl_img_extDeleteArgs>(
      args: SelectSubset<T, tbl_img_extDeleteArgs>
    ): CheckSelect<T, Prisma__tbl_img_extClient<tbl_img_ext>, Prisma__tbl_img_extClient<tbl_img_extGetPayload<T>>>

    /**
     * Update one Tbl_img_ext.
     * @param {tbl_img_extUpdateArgs} args - Arguments to update one Tbl_img_ext.
     * @example
     * // Update one Tbl_img_ext
     * const tbl_img_ext = await prisma.tbl_img_ext.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbl_img_extUpdateArgs>(
      args: SelectSubset<T, tbl_img_extUpdateArgs>
    ): CheckSelect<T, Prisma__tbl_img_extClient<tbl_img_ext>, Prisma__tbl_img_extClient<tbl_img_extGetPayload<T>>>

    /**
     * Delete zero or more Tbl_img_exts.
     * @param {tbl_img_extDeleteManyArgs} args - Arguments to filter Tbl_img_exts to delete.
     * @example
     * // Delete a few Tbl_img_exts
     * const { count } = await prisma.tbl_img_ext.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbl_img_extDeleteManyArgs>(
      args?: SelectSubset<T, tbl_img_extDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tbl_img_exts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_img_extUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tbl_img_exts
     * const tbl_img_ext = await prisma.tbl_img_ext.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbl_img_extUpdateManyArgs>(
      args: SelectSubset<T, tbl_img_extUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tbl_img_ext.
     * @param {tbl_img_extUpsertArgs} args - Arguments to update or create a Tbl_img_ext.
     * @example
     * // Update or create a Tbl_img_ext
     * const tbl_img_ext = await prisma.tbl_img_ext.upsert({
     *   create: {
     *     // ... data to create a Tbl_img_ext
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tbl_img_ext we want to update
     *   }
     * })
    **/
    upsert<T extends tbl_img_extUpsertArgs>(
      args: SelectSubset<T, tbl_img_extUpsertArgs>
    ): CheckSelect<T, Prisma__tbl_img_extClient<tbl_img_ext>, Prisma__tbl_img_extClient<tbl_img_extGetPayload<T>>>

    /**
     * Count the number of Tbl_img_exts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_img_extCountArgs} args - Arguments to filter Tbl_img_exts to count.
     * @example
     * // Count the number of Tbl_img_exts
     * const count = await prisma.tbl_img_ext.count({
     *   where: {
     *     // ... the filter for the Tbl_img_exts we want to count
     *   }
     * })
    **/
    count<T extends tbl_img_extCountArgs>(
      args?: Subset<T, tbl_img_extCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Tbl_img_extCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tbl_img_ext.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tbl_img_extAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Tbl_img_extAggregateArgs>(args: Subset<T, Tbl_img_extAggregateArgs>): PrismaPromise<GetTbl_img_extAggregateType<T>>

    /**
     * Group by Tbl_img_ext.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tbl_img_extGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Tbl_img_extGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Tbl_img_extGroupByArgs['orderBy'] }
        : { orderBy?: Tbl_img_extGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Tbl_img_extGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbl_img_extGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for tbl_img_ext.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbl_img_extClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * tbl_img_ext findUnique
   */
  export type tbl_img_extFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the tbl_img_ext
     * 
    **/
    select?: tbl_img_extSelect | null
    /**
     * Throw an Error if a tbl_img_ext can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tbl_img_ext to fetch.
     * 
    **/
    where: tbl_img_extWhereUniqueInput
  }


  /**
   * tbl_img_ext findFirst
   */
  export type tbl_img_extFindFirstArgs = {
    /**
     * Select specific fields to fetch from the tbl_img_ext
     * 
    **/
    select?: tbl_img_extSelect | null
    /**
     * Throw an Error if a tbl_img_ext can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tbl_img_ext to fetch.
     * 
    **/
    where?: tbl_img_extWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_img_exts to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_img_extOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbl_img_exts.
     * 
    **/
    cursor?: tbl_img_extWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_img_exts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_img_exts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbl_img_exts.
     * 
    **/
    distinct?: Enumerable<Tbl_img_extScalarFieldEnum>
  }


  /**
   * tbl_img_ext findMany
   */
  export type tbl_img_extFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbl_img_ext
     * 
    **/
    select?: tbl_img_extSelect | null
    /**
     * Filter, which tbl_img_exts to fetch.
     * 
    **/
    where?: tbl_img_extWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_img_exts to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_img_extOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbl_img_exts.
     * 
    **/
    cursor?: tbl_img_extWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_img_exts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_img_exts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Tbl_img_extScalarFieldEnum>
  }


  /**
   * tbl_img_ext create
   */
  export type tbl_img_extCreateArgs = {
    /**
     * Select specific fields to fetch from the tbl_img_ext
     * 
    **/
    select?: tbl_img_extSelect | null
    /**
     * The data needed to create a tbl_img_ext.
     * 
    **/
    data: XOR<tbl_img_extCreateInput, tbl_img_extUncheckedCreateInput>
  }


  /**
   * tbl_img_ext update
   */
  export type tbl_img_extUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbl_img_ext
     * 
    **/
    select?: tbl_img_extSelect | null
    /**
     * The data needed to update a tbl_img_ext.
     * 
    **/
    data: XOR<tbl_img_extUpdateInput, tbl_img_extUncheckedUpdateInput>
    /**
     * Choose, which tbl_img_ext to update.
     * 
    **/
    where: tbl_img_extWhereUniqueInput
  }


  /**
   * tbl_img_ext updateMany
   */
  export type tbl_img_extUpdateManyArgs = {
    /**
     * The data used to update tbl_img_exts.
     * 
    **/
    data: XOR<tbl_img_extUpdateManyMutationInput, tbl_img_extUncheckedUpdateManyInput>
    /**
     * Filter which tbl_img_exts to update
     * 
    **/
    where?: tbl_img_extWhereInput
  }


  /**
   * tbl_img_ext upsert
   */
  export type tbl_img_extUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbl_img_ext
     * 
    **/
    select?: tbl_img_extSelect | null
    /**
     * The filter to search for the tbl_img_ext to update in case it exists.
     * 
    **/
    where: tbl_img_extWhereUniqueInput
    /**
     * In case the tbl_img_ext found by the `where` argument doesn't exist, create a new tbl_img_ext with this data.
     * 
    **/
    create: XOR<tbl_img_extCreateInput, tbl_img_extUncheckedCreateInput>
    /**
     * In case the tbl_img_ext was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<tbl_img_extUpdateInput, tbl_img_extUncheckedUpdateInput>
  }


  /**
   * tbl_img_ext delete
   */
  export type tbl_img_extDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbl_img_ext
     * 
    **/
    select?: tbl_img_extSelect | null
    /**
     * Filter which tbl_img_ext to delete.
     * 
    **/
    where: tbl_img_extWhereUniqueInput
  }


  /**
   * tbl_img_ext deleteMany
   */
  export type tbl_img_extDeleteManyArgs = {
    /**
     * Filter which tbl_img_exts to delete
     * 
    **/
    where?: tbl_img_extWhereInput
  }


  /**
   * tbl_img_ext without action
   */
  export type tbl_img_extArgs = {
    /**
     * Select specific fields to fetch from the tbl_img_ext
     * 
    **/
    select?: tbl_img_extSelect | null
  }



  /**
   * Model tbl_author
   */


  export type AggregateTbl_author = {
    _count: Tbl_authorCountAggregateOutputType | null
    _min: Tbl_authorMinAggregateOutputType | null
    _max: Tbl_authorMaxAggregateOutputType | null
  }

  export type Tbl_authorMinAggregateOutputType = {
    name: string | null
    id: string | null
    desc: string | null
    type: string | null
    create_at: Date | null
    update_at: Date | null
  }

  export type Tbl_authorMaxAggregateOutputType = {
    name: string | null
    id: string | null
    desc: string | null
    type: string | null
    create_at: Date | null
    update_at: Date | null
  }

  export type Tbl_authorCountAggregateOutputType = {
    name: number
    id: number
    desc: number
    type: number
    create_at: number
    update_at: number
    _all: number
  }


  export type Tbl_authorMinAggregateInputType = {
    name?: true
    id?: true
    desc?: true
    type?: true
    create_at?: true
    update_at?: true
  }

  export type Tbl_authorMaxAggregateInputType = {
    name?: true
    id?: true
    desc?: true
    type?: true
    create_at?: true
    update_at?: true
  }

  export type Tbl_authorCountAggregateInputType = {
    name?: true
    id?: true
    desc?: true
    type?: true
    create_at?: true
    update_at?: true
    _all?: true
  }

  export type Tbl_authorAggregateArgs = {
    /**
     * Filter which tbl_author to aggregate.
     * 
    **/
    where?: tbl_authorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_authors to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_authorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: tbl_authorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_authors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_authors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbl_authors
    **/
    _count?: true | Tbl_authorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Tbl_authorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Tbl_authorMaxAggregateInputType
  }

  export type GetTbl_authorAggregateType<T extends Tbl_authorAggregateArgs> = {
        [P in keyof T & keyof AggregateTbl_author]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbl_author[P]>
      : GetScalarType<T[P], AggregateTbl_author[P]>
  }




  export type Tbl_authorGroupByArgs = {
    where?: tbl_authorWhereInput
    orderBy?: Enumerable<tbl_authorOrderByWithAggregationInput>
    by: Array<Tbl_authorScalarFieldEnum>
    having?: tbl_authorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Tbl_authorCountAggregateInputType | true
    _min?: Tbl_authorMinAggregateInputType
    _max?: Tbl_authorMaxAggregateInputType
  }


  export type Tbl_authorGroupByOutputType = {
    name: string
    id: string
    desc: string
    type: string
    create_at: Date
    update_at: Date
    _count: Tbl_authorCountAggregateOutputType | null
    _min: Tbl_authorMinAggregateOutputType | null
    _max: Tbl_authorMaxAggregateOutputType | null
  }

  type GetTbl_authorGroupByPayload<T extends Tbl_authorGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Tbl_authorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Tbl_authorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Tbl_authorGroupByOutputType[P]>
            : GetScalarType<T[P], Tbl_authorGroupByOutputType[P]>
        }
      >
    >


  export type tbl_authorSelect = {
    name?: boolean
    id?: boolean
    desc?: boolean
    type?: boolean
    create_at?: boolean
    update_at?: boolean
  }

  export type tbl_authorGetPayload<
    S extends boolean | null | undefined | tbl_authorArgs,
    U = keyof S
      > = S extends true
        ? tbl_author
    : S extends undefined
    ? never
    : S extends tbl_authorArgs | tbl_authorFindManyArgs
    ?'include' extends U
    ? tbl_author 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof tbl_author ? tbl_author[P] : never
  } 
    : tbl_author
  : tbl_author


  type tbl_authorCountArgs = Merge<
    Omit<tbl_authorFindManyArgs, 'select' | 'include'> & {
      select?: Tbl_authorCountAggregateInputType | true
    }
  >

  export interface tbl_authorDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Tbl_author that matches the filter.
     * @param {tbl_authorFindUniqueArgs} args - Arguments to find a Tbl_author
     * @example
     * // Get one Tbl_author
     * const tbl_author = await prisma.tbl_author.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbl_authorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbl_authorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbl_author'> extends True ? CheckSelect<T, Prisma__tbl_authorClient<tbl_author>, Prisma__tbl_authorClient<tbl_authorGetPayload<T>>> : CheckSelect<T, Prisma__tbl_authorClient<tbl_author | null >, Prisma__tbl_authorClient<tbl_authorGetPayload<T> | null >>

    /**
     * Find the first Tbl_author that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_authorFindFirstArgs} args - Arguments to find a Tbl_author
     * @example
     * // Get one Tbl_author
     * const tbl_author = await prisma.tbl_author.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbl_authorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbl_authorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbl_author'> extends True ? CheckSelect<T, Prisma__tbl_authorClient<tbl_author>, Prisma__tbl_authorClient<tbl_authorGetPayload<T>>> : CheckSelect<T, Prisma__tbl_authorClient<tbl_author | null >, Prisma__tbl_authorClient<tbl_authorGetPayload<T> | null >>

    /**
     * Find zero or more Tbl_authors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_authorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tbl_authors
     * const tbl_authors = await prisma.tbl_author.findMany()
     * 
     * // Get first 10 Tbl_authors
     * const tbl_authors = await prisma.tbl_author.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const tbl_authorWithNameOnly = await prisma.tbl_author.findMany({ select: { name: true } })
     * 
    **/
    findMany<T extends tbl_authorFindManyArgs>(
      args?: SelectSubset<T, tbl_authorFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<tbl_author>>, PrismaPromise<Array<tbl_authorGetPayload<T>>>>

    /**
     * Create a Tbl_author.
     * @param {tbl_authorCreateArgs} args - Arguments to create a Tbl_author.
     * @example
     * // Create one Tbl_author
     * const Tbl_author = await prisma.tbl_author.create({
     *   data: {
     *     // ... data to create a Tbl_author
     *   }
     * })
     * 
    **/
    create<T extends tbl_authorCreateArgs>(
      args: SelectSubset<T, tbl_authorCreateArgs>
    ): CheckSelect<T, Prisma__tbl_authorClient<tbl_author>, Prisma__tbl_authorClient<tbl_authorGetPayload<T>>>

    /**
     * Delete a Tbl_author.
     * @param {tbl_authorDeleteArgs} args - Arguments to delete one Tbl_author.
     * @example
     * // Delete one Tbl_author
     * const Tbl_author = await prisma.tbl_author.delete({
     *   where: {
     *     // ... filter to delete one Tbl_author
     *   }
     * })
     * 
    **/
    delete<T extends tbl_authorDeleteArgs>(
      args: SelectSubset<T, tbl_authorDeleteArgs>
    ): CheckSelect<T, Prisma__tbl_authorClient<tbl_author>, Prisma__tbl_authorClient<tbl_authorGetPayload<T>>>

    /**
     * Update one Tbl_author.
     * @param {tbl_authorUpdateArgs} args - Arguments to update one Tbl_author.
     * @example
     * // Update one Tbl_author
     * const tbl_author = await prisma.tbl_author.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbl_authorUpdateArgs>(
      args: SelectSubset<T, tbl_authorUpdateArgs>
    ): CheckSelect<T, Prisma__tbl_authorClient<tbl_author>, Prisma__tbl_authorClient<tbl_authorGetPayload<T>>>

    /**
     * Delete zero or more Tbl_authors.
     * @param {tbl_authorDeleteManyArgs} args - Arguments to filter Tbl_authors to delete.
     * @example
     * // Delete a few Tbl_authors
     * const { count } = await prisma.tbl_author.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbl_authorDeleteManyArgs>(
      args?: SelectSubset<T, tbl_authorDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tbl_authors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_authorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tbl_authors
     * const tbl_author = await prisma.tbl_author.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbl_authorUpdateManyArgs>(
      args: SelectSubset<T, tbl_authorUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tbl_author.
     * @param {tbl_authorUpsertArgs} args - Arguments to update or create a Tbl_author.
     * @example
     * // Update or create a Tbl_author
     * const tbl_author = await prisma.tbl_author.upsert({
     *   create: {
     *     // ... data to create a Tbl_author
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tbl_author we want to update
     *   }
     * })
    **/
    upsert<T extends tbl_authorUpsertArgs>(
      args: SelectSubset<T, tbl_authorUpsertArgs>
    ): CheckSelect<T, Prisma__tbl_authorClient<tbl_author>, Prisma__tbl_authorClient<tbl_authorGetPayload<T>>>

    /**
     * Count the number of Tbl_authors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_authorCountArgs} args - Arguments to filter Tbl_authors to count.
     * @example
     * // Count the number of Tbl_authors
     * const count = await prisma.tbl_author.count({
     *   where: {
     *     // ... the filter for the Tbl_authors we want to count
     *   }
     * })
    **/
    count<T extends tbl_authorCountArgs>(
      args?: Subset<T, tbl_authorCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Tbl_authorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tbl_author.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tbl_authorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Tbl_authorAggregateArgs>(args: Subset<T, Tbl_authorAggregateArgs>): PrismaPromise<GetTbl_authorAggregateType<T>>

    /**
     * Group by Tbl_author.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tbl_authorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Tbl_authorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Tbl_authorGroupByArgs['orderBy'] }
        : { orderBy?: Tbl_authorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Tbl_authorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbl_authorGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for tbl_author.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbl_authorClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * tbl_author findUnique
   */
  export type tbl_authorFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the tbl_author
     * 
    **/
    select?: tbl_authorSelect | null
    /**
     * Throw an Error if a tbl_author can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tbl_author to fetch.
     * 
    **/
    where: tbl_authorWhereUniqueInput
  }


  /**
   * tbl_author findFirst
   */
  export type tbl_authorFindFirstArgs = {
    /**
     * Select specific fields to fetch from the tbl_author
     * 
    **/
    select?: tbl_authorSelect | null
    /**
     * Throw an Error if a tbl_author can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tbl_author to fetch.
     * 
    **/
    where?: tbl_authorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_authors to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_authorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbl_authors.
     * 
    **/
    cursor?: tbl_authorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_authors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_authors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbl_authors.
     * 
    **/
    distinct?: Enumerable<Tbl_authorScalarFieldEnum>
  }


  /**
   * tbl_author findMany
   */
  export type tbl_authorFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbl_author
     * 
    **/
    select?: tbl_authorSelect | null
    /**
     * Filter, which tbl_authors to fetch.
     * 
    **/
    where?: tbl_authorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_authors to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_authorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbl_authors.
     * 
    **/
    cursor?: tbl_authorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_authors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_authors.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Tbl_authorScalarFieldEnum>
  }


  /**
   * tbl_author create
   */
  export type tbl_authorCreateArgs = {
    /**
     * Select specific fields to fetch from the tbl_author
     * 
    **/
    select?: tbl_authorSelect | null
    /**
     * The data needed to create a tbl_author.
     * 
    **/
    data: XOR<tbl_authorCreateInput, tbl_authorUncheckedCreateInput>
  }


  /**
   * tbl_author update
   */
  export type tbl_authorUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbl_author
     * 
    **/
    select?: tbl_authorSelect | null
    /**
     * The data needed to update a tbl_author.
     * 
    **/
    data: XOR<tbl_authorUpdateInput, tbl_authorUncheckedUpdateInput>
    /**
     * Choose, which tbl_author to update.
     * 
    **/
    where: tbl_authorWhereUniqueInput
  }


  /**
   * tbl_author updateMany
   */
  export type tbl_authorUpdateManyArgs = {
    /**
     * The data used to update tbl_authors.
     * 
    **/
    data: XOR<tbl_authorUpdateManyMutationInput, tbl_authorUncheckedUpdateManyInput>
    /**
     * Filter which tbl_authors to update
     * 
    **/
    where?: tbl_authorWhereInput
  }


  /**
   * tbl_author upsert
   */
  export type tbl_authorUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbl_author
     * 
    **/
    select?: tbl_authorSelect | null
    /**
     * The filter to search for the tbl_author to update in case it exists.
     * 
    **/
    where: tbl_authorWhereUniqueInput
    /**
     * In case the tbl_author found by the `where` argument doesn't exist, create a new tbl_author with this data.
     * 
    **/
    create: XOR<tbl_authorCreateInput, tbl_authorUncheckedCreateInput>
    /**
     * In case the tbl_author was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<tbl_authorUpdateInput, tbl_authorUncheckedUpdateInput>
  }


  /**
   * tbl_author delete
   */
  export type tbl_authorDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbl_author
     * 
    **/
    select?: tbl_authorSelect | null
    /**
     * Filter which tbl_author to delete.
     * 
    **/
    where: tbl_authorWhereUniqueInput
  }


  /**
   * tbl_author deleteMany
   */
  export type tbl_authorDeleteManyArgs = {
    /**
     * Filter which tbl_authors to delete
     * 
    **/
    where?: tbl_authorWhereInput
  }


  /**
   * tbl_author without action
   */
  export type tbl_authorArgs = {
    /**
     * Select specific fields to fetch from the tbl_author
     * 
    **/
    select?: tbl_authorSelect | null
  }



  /**
   * Model tbl_tag
   */


  export type AggregateTbl_tag = {
    _count: Tbl_tagCountAggregateOutputType | null
    _min: Tbl_tagMinAggregateOutputType | null
    _max: Tbl_tagMaxAggregateOutputType | null
  }

  export type Tbl_tagMinAggregateOutputType = {
    name: string | null
    alias: string | null
    id: string | null
    category_id: string | null
    category: string | null
    create_at: Date | null
    update_at: Date | null
  }

  export type Tbl_tagMaxAggregateOutputType = {
    name: string | null
    alias: string | null
    id: string | null
    category_id: string | null
    category: string | null
    create_at: Date | null
    update_at: Date | null
  }

  export type Tbl_tagCountAggregateOutputType = {
    name: number
    alias: number
    id: number
    category_id: number
    category: number
    create_at: number
    update_at: number
    _all: number
  }


  export type Tbl_tagMinAggregateInputType = {
    name?: true
    alias?: true
    id?: true
    category_id?: true
    category?: true
    create_at?: true
    update_at?: true
  }

  export type Tbl_tagMaxAggregateInputType = {
    name?: true
    alias?: true
    id?: true
    category_id?: true
    category?: true
    create_at?: true
    update_at?: true
  }

  export type Tbl_tagCountAggregateInputType = {
    name?: true
    alias?: true
    id?: true
    category_id?: true
    category?: true
    create_at?: true
    update_at?: true
    _all?: true
  }

  export type Tbl_tagAggregateArgs = {
    /**
     * Filter which tbl_tag to aggregate.
     * 
    **/
    where?: tbl_tagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_tags to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_tagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: tbl_tagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_tags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_tags.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbl_tags
    **/
    _count?: true | Tbl_tagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Tbl_tagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Tbl_tagMaxAggregateInputType
  }

  export type GetTbl_tagAggregateType<T extends Tbl_tagAggregateArgs> = {
        [P in keyof T & keyof AggregateTbl_tag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbl_tag[P]>
      : GetScalarType<T[P], AggregateTbl_tag[P]>
  }




  export type Tbl_tagGroupByArgs = {
    where?: tbl_tagWhereInput
    orderBy?: Enumerable<tbl_tagOrderByWithAggregationInput>
    by: Array<Tbl_tagScalarFieldEnum>
    having?: tbl_tagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Tbl_tagCountAggregateInputType | true
    _min?: Tbl_tagMinAggregateInputType
    _max?: Tbl_tagMaxAggregateInputType
  }


  export type Tbl_tagGroupByOutputType = {
    name: string
    alias: string
    id: string
    category_id: string
    category: string
    create_at: Date
    update_at: Date
    _count: Tbl_tagCountAggregateOutputType | null
    _min: Tbl_tagMinAggregateOutputType | null
    _max: Tbl_tagMaxAggregateOutputType | null
  }

  type GetTbl_tagGroupByPayload<T extends Tbl_tagGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Tbl_tagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Tbl_tagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Tbl_tagGroupByOutputType[P]>
            : GetScalarType<T[P], Tbl_tagGroupByOutputType[P]>
        }
      >
    >


  export type tbl_tagSelect = {
    name?: boolean
    alias?: boolean
    id?: boolean
    category_id?: boolean
    category?: boolean
    create_at?: boolean
    update_at?: boolean
  }

  export type tbl_tagGetPayload<
    S extends boolean | null | undefined | tbl_tagArgs,
    U = keyof S
      > = S extends true
        ? tbl_tag
    : S extends undefined
    ? never
    : S extends tbl_tagArgs | tbl_tagFindManyArgs
    ?'include' extends U
    ? tbl_tag 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof tbl_tag ? tbl_tag[P] : never
  } 
    : tbl_tag
  : tbl_tag


  type tbl_tagCountArgs = Merge<
    Omit<tbl_tagFindManyArgs, 'select' | 'include'> & {
      select?: Tbl_tagCountAggregateInputType | true
    }
  >

  export interface tbl_tagDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Tbl_tag that matches the filter.
     * @param {tbl_tagFindUniqueArgs} args - Arguments to find a Tbl_tag
     * @example
     * // Get one Tbl_tag
     * const tbl_tag = await prisma.tbl_tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbl_tagFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbl_tagFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbl_tag'> extends True ? CheckSelect<T, Prisma__tbl_tagClient<tbl_tag>, Prisma__tbl_tagClient<tbl_tagGetPayload<T>>> : CheckSelect<T, Prisma__tbl_tagClient<tbl_tag | null >, Prisma__tbl_tagClient<tbl_tagGetPayload<T> | null >>

    /**
     * Find the first Tbl_tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_tagFindFirstArgs} args - Arguments to find a Tbl_tag
     * @example
     * // Get one Tbl_tag
     * const tbl_tag = await prisma.tbl_tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbl_tagFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbl_tagFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbl_tag'> extends True ? CheckSelect<T, Prisma__tbl_tagClient<tbl_tag>, Prisma__tbl_tagClient<tbl_tagGetPayload<T>>> : CheckSelect<T, Prisma__tbl_tagClient<tbl_tag | null >, Prisma__tbl_tagClient<tbl_tagGetPayload<T> | null >>

    /**
     * Find zero or more Tbl_tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_tagFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tbl_tags
     * const tbl_tags = await prisma.tbl_tag.findMany()
     * 
     * // Get first 10 Tbl_tags
     * const tbl_tags = await prisma.tbl_tag.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const tbl_tagWithNameOnly = await prisma.tbl_tag.findMany({ select: { name: true } })
     * 
    **/
    findMany<T extends tbl_tagFindManyArgs>(
      args?: SelectSubset<T, tbl_tagFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<tbl_tag>>, PrismaPromise<Array<tbl_tagGetPayload<T>>>>

    /**
     * Create a Tbl_tag.
     * @param {tbl_tagCreateArgs} args - Arguments to create a Tbl_tag.
     * @example
     * // Create one Tbl_tag
     * const Tbl_tag = await prisma.tbl_tag.create({
     *   data: {
     *     // ... data to create a Tbl_tag
     *   }
     * })
     * 
    **/
    create<T extends tbl_tagCreateArgs>(
      args: SelectSubset<T, tbl_tagCreateArgs>
    ): CheckSelect<T, Prisma__tbl_tagClient<tbl_tag>, Prisma__tbl_tagClient<tbl_tagGetPayload<T>>>

    /**
     * Delete a Tbl_tag.
     * @param {tbl_tagDeleteArgs} args - Arguments to delete one Tbl_tag.
     * @example
     * // Delete one Tbl_tag
     * const Tbl_tag = await prisma.tbl_tag.delete({
     *   where: {
     *     // ... filter to delete one Tbl_tag
     *   }
     * })
     * 
    **/
    delete<T extends tbl_tagDeleteArgs>(
      args: SelectSubset<T, tbl_tagDeleteArgs>
    ): CheckSelect<T, Prisma__tbl_tagClient<tbl_tag>, Prisma__tbl_tagClient<tbl_tagGetPayload<T>>>

    /**
     * Update one Tbl_tag.
     * @param {tbl_tagUpdateArgs} args - Arguments to update one Tbl_tag.
     * @example
     * // Update one Tbl_tag
     * const tbl_tag = await prisma.tbl_tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbl_tagUpdateArgs>(
      args: SelectSubset<T, tbl_tagUpdateArgs>
    ): CheckSelect<T, Prisma__tbl_tagClient<tbl_tag>, Prisma__tbl_tagClient<tbl_tagGetPayload<T>>>

    /**
     * Delete zero or more Tbl_tags.
     * @param {tbl_tagDeleteManyArgs} args - Arguments to filter Tbl_tags to delete.
     * @example
     * // Delete a few Tbl_tags
     * const { count } = await prisma.tbl_tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbl_tagDeleteManyArgs>(
      args?: SelectSubset<T, tbl_tagDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tbl_tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_tagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tbl_tags
     * const tbl_tag = await prisma.tbl_tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbl_tagUpdateManyArgs>(
      args: SelectSubset<T, tbl_tagUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tbl_tag.
     * @param {tbl_tagUpsertArgs} args - Arguments to update or create a Tbl_tag.
     * @example
     * // Update or create a Tbl_tag
     * const tbl_tag = await prisma.tbl_tag.upsert({
     *   create: {
     *     // ... data to create a Tbl_tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tbl_tag we want to update
     *   }
     * })
    **/
    upsert<T extends tbl_tagUpsertArgs>(
      args: SelectSubset<T, tbl_tagUpsertArgs>
    ): CheckSelect<T, Prisma__tbl_tagClient<tbl_tag>, Prisma__tbl_tagClient<tbl_tagGetPayload<T>>>

    /**
     * Count the number of Tbl_tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_tagCountArgs} args - Arguments to filter Tbl_tags to count.
     * @example
     * // Count the number of Tbl_tags
     * const count = await prisma.tbl_tag.count({
     *   where: {
     *     // ... the filter for the Tbl_tags we want to count
     *   }
     * })
    **/
    count<T extends tbl_tagCountArgs>(
      args?: Subset<T, tbl_tagCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Tbl_tagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tbl_tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tbl_tagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Tbl_tagAggregateArgs>(args: Subset<T, Tbl_tagAggregateArgs>): PrismaPromise<GetTbl_tagAggregateType<T>>

    /**
     * Group by Tbl_tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tbl_tagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Tbl_tagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Tbl_tagGroupByArgs['orderBy'] }
        : { orderBy?: Tbl_tagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Tbl_tagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbl_tagGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for tbl_tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbl_tagClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * tbl_tag findUnique
   */
  export type tbl_tagFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the tbl_tag
     * 
    **/
    select?: tbl_tagSelect | null
    /**
     * Throw an Error if a tbl_tag can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tbl_tag to fetch.
     * 
    **/
    where: tbl_tagWhereUniqueInput
  }


  /**
   * tbl_tag findFirst
   */
  export type tbl_tagFindFirstArgs = {
    /**
     * Select specific fields to fetch from the tbl_tag
     * 
    **/
    select?: tbl_tagSelect | null
    /**
     * Throw an Error if a tbl_tag can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tbl_tag to fetch.
     * 
    **/
    where?: tbl_tagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_tags to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_tagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbl_tags.
     * 
    **/
    cursor?: tbl_tagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_tags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_tags.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbl_tags.
     * 
    **/
    distinct?: Enumerable<Tbl_tagScalarFieldEnum>
  }


  /**
   * tbl_tag findMany
   */
  export type tbl_tagFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbl_tag
     * 
    **/
    select?: tbl_tagSelect | null
    /**
     * Filter, which tbl_tags to fetch.
     * 
    **/
    where?: tbl_tagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_tags to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_tagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbl_tags.
     * 
    **/
    cursor?: tbl_tagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_tags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_tags.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Tbl_tagScalarFieldEnum>
  }


  /**
   * tbl_tag create
   */
  export type tbl_tagCreateArgs = {
    /**
     * Select specific fields to fetch from the tbl_tag
     * 
    **/
    select?: tbl_tagSelect | null
    /**
     * The data needed to create a tbl_tag.
     * 
    **/
    data: XOR<tbl_tagCreateInput, tbl_tagUncheckedCreateInput>
  }


  /**
   * tbl_tag update
   */
  export type tbl_tagUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbl_tag
     * 
    **/
    select?: tbl_tagSelect | null
    /**
     * The data needed to update a tbl_tag.
     * 
    **/
    data: XOR<tbl_tagUpdateInput, tbl_tagUncheckedUpdateInput>
    /**
     * Choose, which tbl_tag to update.
     * 
    **/
    where: tbl_tagWhereUniqueInput
  }


  /**
   * tbl_tag updateMany
   */
  export type tbl_tagUpdateManyArgs = {
    /**
     * The data used to update tbl_tags.
     * 
    **/
    data: XOR<tbl_tagUpdateManyMutationInput, tbl_tagUncheckedUpdateManyInput>
    /**
     * Filter which tbl_tags to update
     * 
    **/
    where?: tbl_tagWhereInput
  }


  /**
   * tbl_tag upsert
   */
  export type tbl_tagUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbl_tag
     * 
    **/
    select?: tbl_tagSelect | null
    /**
     * The filter to search for the tbl_tag to update in case it exists.
     * 
    **/
    where: tbl_tagWhereUniqueInput
    /**
     * In case the tbl_tag found by the `where` argument doesn't exist, create a new tbl_tag with this data.
     * 
    **/
    create: XOR<tbl_tagCreateInput, tbl_tagUncheckedCreateInput>
    /**
     * In case the tbl_tag was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<tbl_tagUpdateInput, tbl_tagUncheckedUpdateInput>
  }


  /**
   * tbl_tag delete
   */
  export type tbl_tagDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbl_tag
     * 
    **/
    select?: tbl_tagSelect | null
    /**
     * Filter which tbl_tag to delete.
     * 
    **/
    where: tbl_tagWhereUniqueInput
  }


  /**
   * tbl_tag deleteMany
   */
  export type tbl_tagDeleteManyArgs = {
    /**
     * Filter which tbl_tags to delete
     * 
    **/
    where?: tbl_tagWhereInput
  }


  /**
   * tbl_tag without action
   */
  export type tbl_tagArgs = {
    /**
     * Select specific fields to fetch from the tbl_tag
     * 
    **/
    select?: tbl_tagSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const Tbl_imgScalarFieldEnum: {
    id: 'id',
    file_type: 'file_type',
    file_size: 'file_size',
    dimension_x: 'dimension_x',
    dimension_y: 'dimension_y',
    purity: 'purity',
    category: 'category',
    path: 'path',
    url: 'url',
    source: 'source',
    colors: 'colors',
    desc: 'desc',
    created_time: 'created_time',
    create_at: 'create_at',
    update_at: 'update_at'
  };

  export type Tbl_imgScalarFieldEnum = (typeof Tbl_imgScalarFieldEnum)[keyof typeof Tbl_imgScalarFieldEnum]


  export const Tbl_img_extScalarFieldEnum: {
    id: 'id',
    views: 'views',
    favorites: 'favorites',
    ratio: 'ratio',
    tags: 'tags',
    author_name: 'author_name',
    author_id: 'author_id',
    artist_name: 'artist_name',
    artist_id: 'artist_id',
    create_at: 'create_at',
    update_at: 'update_at'
  };

  export type Tbl_img_extScalarFieldEnum = (typeof Tbl_img_extScalarFieldEnum)[keyof typeof Tbl_img_extScalarFieldEnum]


  export const Tbl_authorScalarFieldEnum: {
    name: 'name',
    id: 'id',
    desc: 'desc',
    type: 'type',
    create_at: 'create_at',
    update_at: 'update_at'
  };

  export type Tbl_authorScalarFieldEnum = (typeof Tbl_authorScalarFieldEnum)[keyof typeof Tbl_authorScalarFieldEnum]


  export const Tbl_tagScalarFieldEnum: {
    name: 'name',
    alias: 'alias',
    id: 'id',
    category_id: 'category_id',
    category: 'category',
    create_at: 'create_at',
    update_at: 'update_at'
  };

  export type Tbl_tagScalarFieldEnum = (typeof Tbl_tagScalarFieldEnum)[keyof typeof Tbl_tagScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type tbl_imgWhereInput = {
    AND?: Enumerable<tbl_imgWhereInput>
    OR?: Enumerable<tbl_imgWhereInput>
    NOT?: Enumerable<tbl_imgWhereInput>
    id?: StringFilter | string
    file_type?: StringFilter | string
    file_size?: IntFilter | number
    dimension_x?: IntFilter | number
    dimension_y?: IntFilter | number
    purity?: StringFilter | string
    category?: StringFilter | string
    path?: StringFilter | string
    url?: StringFilter | string
    source?: StringFilter | string
    colors?: StringFilter | string
    desc?: StringFilter | string
    created_time?: DateTimeFilter | Date | string
    create_at?: DateTimeFilter | Date | string
    update_at?: DateTimeFilter | Date | string
  }

  export type tbl_imgOrderByWithRelationInput = {
    id?: SortOrder
    file_type?: SortOrder
    file_size?: SortOrder
    dimension_x?: SortOrder
    dimension_y?: SortOrder
    purity?: SortOrder
    category?: SortOrder
    path?: SortOrder
    url?: SortOrder
    source?: SortOrder
    colors?: SortOrder
    desc?: SortOrder
    created_time?: SortOrder
    create_at?: SortOrder
    update_at?: SortOrder
  }

  export type tbl_imgWhereUniqueInput = {
    id?: string
  }

  export type tbl_imgOrderByWithAggregationInput = {
    id?: SortOrder
    file_type?: SortOrder
    file_size?: SortOrder
    dimension_x?: SortOrder
    dimension_y?: SortOrder
    purity?: SortOrder
    category?: SortOrder
    path?: SortOrder
    url?: SortOrder
    source?: SortOrder
    colors?: SortOrder
    desc?: SortOrder
    created_time?: SortOrder
    create_at?: SortOrder
    update_at?: SortOrder
    _count?: tbl_imgCountOrderByAggregateInput
    _avg?: tbl_imgAvgOrderByAggregateInput
    _max?: tbl_imgMaxOrderByAggregateInput
    _min?: tbl_imgMinOrderByAggregateInput
    _sum?: tbl_imgSumOrderByAggregateInput
  }

  export type tbl_imgScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbl_imgScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbl_imgScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbl_imgScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    file_type?: StringWithAggregatesFilter | string
    file_size?: IntWithAggregatesFilter | number
    dimension_x?: IntWithAggregatesFilter | number
    dimension_y?: IntWithAggregatesFilter | number
    purity?: StringWithAggregatesFilter | string
    category?: StringWithAggregatesFilter | string
    path?: StringWithAggregatesFilter | string
    url?: StringWithAggregatesFilter | string
    source?: StringWithAggregatesFilter | string
    colors?: StringWithAggregatesFilter | string
    desc?: StringWithAggregatesFilter | string
    created_time?: DateTimeWithAggregatesFilter | Date | string
    create_at?: DateTimeWithAggregatesFilter | Date | string
    update_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type tbl_img_extWhereInput = {
    AND?: Enumerable<tbl_img_extWhereInput>
    OR?: Enumerable<tbl_img_extWhereInput>
    NOT?: Enumerable<tbl_img_extWhereInput>
    id?: StringFilter | string
    views?: IntFilter | number
    favorites?: IntFilter | number
    ratio?: DecimalFilter | Decimal | number | string
    tags?: StringFilter | string
    author_name?: StringFilter | string
    author_id?: StringFilter | string
    artist_name?: StringFilter | string
    artist_id?: StringFilter | string
    create_at?: DateTimeFilter | Date | string
    update_at?: DateTimeFilter | Date | string
  }

  export type tbl_img_extOrderByWithRelationInput = {
    id?: SortOrder
    views?: SortOrder
    favorites?: SortOrder
    ratio?: SortOrder
    tags?: SortOrder
    author_name?: SortOrder
    author_id?: SortOrder
    artist_name?: SortOrder
    artist_id?: SortOrder
    create_at?: SortOrder
    update_at?: SortOrder
  }

  export type tbl_img_extWhereUniqueInput = {
    id?: string
  }

  export type tbl_img_extOrderByWithAggregationInput = {
    id?: SortOrder
    views?: SortOrder
    favorites?: SortOrder
    ratio?: SortOrder
    tags?: SortOrder
    author_name?: SortOrder
    author_id?: SortOrder
    artist_name?: SortOrder
    artist_id?: SortOrder
    create_at?: SortOrder
    update_at?: SortOrder
    _count?: tbl_img_extCountOrderByAggregateInput
    _avg?: tbl_img_extAvgOrderByAggregateInput
    _max?: tbl_img_extMaxOrderByAggregateInput
    _min?: tbl_img_extMinOrderByAggregateInput
    _sum?: tbl_img_extSumOrderByAggregateInput
  }

  export type tbl_img_extScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbl_img_extScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbl_img_extScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbl_img_extScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    views?: IntWithAggregatesFilter | number
    favorites?: IntWithAggregatesFilter | number
    ratio?: DecimalWithAggregatesFilter | Decimal | number | string
    tags?: StringWithAggregatesFilter | string
    author_name?: StringWithAggregatesFilter | string
    author_id?: StringWithAggregatesFilter | string
    artist_name?: StringWithAggregatesFilter | string
    artist_id?: StringWithAggregatesFilter | string
    create_at?: DateTimeWithAggregatesFilter | Date | string
    update_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type tbl_authorWhereInput = {
    AND?: Enumerable<tbl_authorWhereInput>
    OR?: Enumerable<tbl_authorWhereInput>
    NOT?: Enumerable<tbl_authorWhereInput>
    name?: StringFilter | string
    id?: StringFilter | string
    desc?: StringFilter | string
    type?: StringFilter | string
    create_at?: DateTimeFilter | Date | string
    update_at?: DateTimeFilter | Date | string
  }

  export type tbl_authorOrderByWithRelationInput = {
    name?: SortOrder
    id?: SortOrder
    desc?: SortOrder
    type?: SortOrder
    create_at?: SortOrder
    update_at?: SortOrder
  }

  export type tbl_authorWhereUniqueInput = {
    name?: string
  }

  export type tbl_authorOrderByWithAggregationInput = {
    name?: SortOrder
    id?: SortOrder
    desc?: SortOrder
    type?: SortOrder
    create_at?: SortOrder
    update_at?: SortOrder
    _count?: tbl_authorCountOrderByAggregateInput
    _max?: tbl_authorMaxOrderByAggregateInput
    _min?: tbl_authorMinOrderByAggregateInput
  }

  export type tbl_authorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbl_authorScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbl_authorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbl_authorScalarWhereWithAggregatesInput>
    name?: StringWithAggregatesFilter | string
    id?: StringWithAggregatesFilter | string
    desc?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    create_at?: DateTimeWithAggregatesFilter | Date | string
    update_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type tbl_tagWhereInput = {
    AND?: Enumerable<tbl_tagWhereInput>
    OR?: Enumerable<tbl_tagWhereInput>
    NOT?: Enumerable<tbl_tagWhereInput>
    name?: StringFilter | string
    alias?: StringFilter | string
    id?: StringFilter | string
    category_id?: StringFilter | string
    category?: StringFilter | string
    create_at?: DateTimeFilter | Date | string
    update_at?: DateTimeFilter | Date | string
  }

  export type tbl_tagOrderByWithRelationInput = {
    name?: SortOrder
    alias?: SortOrder
    id?: SortOrder
    category_id?: SortOrder
    category?: SortOrder
    create_at?: SortOrder
    update_at?: SortOrder
  }

  export type tbl_tagWhereUniqueInput = {
    name?: string
    id?: string
  }

  export type tbl_tagOrderByWithAggregationInput = {
    name?: SortOrder
    alias?: SortOrder
    id?: SortOrder
    category_id?: SortOrder
    category?: SortOrder
    create_at?: SortOrder
    update_at?: SortOrder
    _count?: tbl_tagCountOrderByAggregateInput
    _max?: tbl_tagMaxOrderByAggregateInput
    _min?: tbl_tagMinOrderByAggregateInput
  }

  export type tbl_tagScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbl_tagScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbl_tagScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbl_tagScalarWhereWithAggregatesInput>
    name?: StringWithAggregatesFilter | string
    alias?: StringWithAggregatesFilter | string
    id?: StringWithAggregatesFilter | string
    category_id?: StringWithAggregatesFilter | string
    category?: StringWithAggregatesFilter | string
    create_at?: DateTimeWithAggregatesFilter | Date | string
    update_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type tbl_imgCreateInput = {
    id: string
    file_type: string
    file_size: number
    dimension_x: number
    dimension_y: number
    purity: string
    category: string
    path: string
    url: string
    source: string
    colors: string
    desc: string
    created_time: Date | string
    create_at: Date | string
    update_at: Date | string
  }

  export type tbl_imgUncheckedCreateInput = {
    id: string
    file_type: string
    file_size: number
    dimension_x: number
    dimension_y: number
    purity: string
    category: string
    path: string
    url: string
    source: string
    colors: string
    desc: string
    created_time: Date | string
    create_at: Date | string
    update_at: Date | string
  }

  export type tbl_imgUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    file_type?: StringFieldUpdateOperationsInput | string
    file_size?: IntFieldUpdateOperationsInput | number
    dimension_x?: IntFieldUpdateOperationsInput | number
    dimension_y?: IntFieldUpdateOperationsInput | number
    purity?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    created_time?: DateTimeFieldUpdateOperationsInput | Date | string
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tbl_imgUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    file_type?: StringFieldUpdateOperationsInput | string
    file_size?: IntFieldUpdateOperationsInput | number
    dimension_x?: IntFieldUpdateOperationsInput | number
    dimension_y?: IntFieldUpdateOperationsInput | number
    purity?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    created_time?: DateTimeFieldUpdateOperationsInput | Date | string
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tbl_imgUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    file_type?: StringFieldUpdateOperationsInput | string
    file_size?: IntFieldUpdateOperationsInput | number
    dimension_x?: IntFieldUpdateOperationsInput | number
    dimension_y?: IntFieldUpdateOperationsInput | number
    purity?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    created_time?: DateTimeFieldUpdateOperationsInput | Date | string
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tbl_imgUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    file_type?: StringFieldUpdateOperationsInput | string
    file_size?: IntFieldUpdateOperationsInput | number
    dimension_x?: IntFieldUpdateOperationsInput | number
    dimension_y?: IntFieldUpdateOperationsInput | number
    purity?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    created_time?: DateTimeFieldUpdateOperationsInput | Date | string
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tbl_img_extCreateInput = {
    id: string
    views: number
    favorites: number
    ratio: Decimal | number | string
    tags: string
    author_name: string
    author_id: string
    artist_name: string
    artist_id: string
    create_at: Date | string
    update_at: Date | string
  }

  export type tbl_img_extUncheckedCreateInput = {
    id: string
    views: number
    favorites: number
    ratio: Decimal | number | string
    tags: string
    author_name: string
    author_id: string
    artist_name: string
    artist_id: string
    create_at: Date | string
    update_at: Date | string
  }

  export type tbl_img_extUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    favorites?: IntFieldUpdateOperationsInput | number
    ratio?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    tags?: StringFieldUpdateOperationsInput | string
    author_name?: StringFieldUpdateOperationsInput | string
    author_id?: StringFieldUpdateOperationsInput | string
    artist_name?: StringFieldUpdateOperationsInput | string
    artist_id?: StringFieldUpdateOperationsInput | string
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tbl_img_extUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    favorites?: IntFieldUpdateOperationsInput | number
    ratio?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    tags?: StringFieldUpdateOperationsInput | string
    author_name?: StringFieldUpdateOperationsInput | string
    author_id?: StringFieldUpdateOperationsInput | string
    artist_name?: StringFieldUpdateOperationsInput | string
    artist_id?: StringFieldUpdateOperationsInput | string
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tbl_img_extUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    favorites?: IntFieldUpdateOperationsInput | number
    ratio?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    tags?: StringFieldUpdateOperationsInput | string
    author_name?: StringFieldUpdateOperationsInput | string
    author_id?: StringFieldUpdateOperationsInput | string
    artist_name?: StringFieldUpdateOperationsInput | string
    artist_id?: StringFieldUpdateOperationsInput | string
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tbl_img_extUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    favorites?: IntFieldUpdateOperationsInput | number
    ratio?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    tags?: StringFieldUpdateOperationsInput | string
    author_name?: StringFieldUpdateOperationsInput | string
    author_id?: StringFieldUpdateOperationsInput | string
    artist_name?: StringFieldUpdateOperationsInput | string
    artist_id?: StringFieldUpdateOperationsInput | string
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tbl_authorCreateInput = {
    name: string
    id: string
    desc: string
    type: string
    create_at: Date | string
    update_at: Date | string
  }

  export type tbl_authorUncheckedCreateInput = {
    name: string
    id: string
    desc: string
    type: string
    create_at: Date | string
    update_at: Date | string
  }

  export type tbl_authorUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tbl_authorUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tbl_authorUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tbl_authorUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tbl_tagCreateInput = {
    name: string
    alias: string
    id: string
    category_id: string
    category: string
    create_at: Date | string
    update_at: Date | string
  }

  export type tbl_tagUncheckedCreateInput = {
    name: string
    alias: string
    id: string
    category_id: string
    category: string
    create_at: Date | string
    update_at: Date | string
  }

  export type tbl_tagUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    category_id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tbl_tagUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    category_id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tbl_tagUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    category_id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tbl_tagUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    category_id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type tbl_imgCountOrderByAggregateInput = {
    id?: SortOrder
    file_type?: SortOrder
    file_size?: SortOrder
    dimension_x?: SortOrder
    dimension_y?: SortOrder
    purity?: SortOrder
    category?: SortOrder
    path?: SortOrder
    url?: SortOrder
    source?: SortOrder
    colors?: SortOrder
    desc?: SortOrder
    created_time?: SortOrder
    create_at?: SortOrder
    update_at?: SortOrder
  }

  export type tbl_imgAvgOrderByAggregateInput = {
    file_size?: SortOrder
    dimension_x?: SortOrder
    dimension_y?: SortOrder
  }

  export type tbl_imgMaxOrderByAggregateInput = {
    id?: SortOrder
    file_type?: SortOrder
    file_size?: SortOrder
    dimension_x?: SortOrder
    dimension_y?: SortOrder
    purity?: SortOrder
    category?: SortOrder
    path?: SortOrder
    url?: SortOrder
    source?: SortOrder
    colors?: SortOrder
    desc?: SortOrder
    created_time?: SortOrder
    create_at?: SortOrder
    update_at?: SortOrder
  }

  export type tbl_imgMinOrderByAggregateInput = {
    id?: SortOrder
    file_type?: SortOrder
    file_size?: SortOrder
    dimension_x?: SortOrder
    dimension_y?: SortOrder
    purity?: SortOrder
    category?: SortOrder
    path?: SortOrder
    url?: SortOrder
    source?: SortOrder
    colors?: SortOrder
    desc?: SortOrder
    created_time?: SortOrder
    create_at?: SortOrder
    update_at?: SortOrder
  }

  export type tbl_imgSumOrderByAggregateInput = {
    file_size?: SortOrder
    dimension_x?: SortOrder
    dimension_y?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type DecimalFilter = {
    equals?: Decimal | number | string
    in?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | number | string
    lte?: Decimal | number | string
    gt?: Decimal | number | string
    gte?: Decimal | number | string
    not?: NestedDecimalFilter | Decimal | number | string
  }

  export type tbl_img_extCountOrderByAggregateInput = {
    id?: SortOrder
    views?: SortOrder
    favorites?: SortOrder
    ratio?: SortOrder
    tags?: SortOrder
    author_name?: SortOrder
    author_id?: SortOrder
    artist_name?: SortOrder
    artist_id?: SortOrder
    create_at?: SortOrder
    update_at?: SortOrder
  }

  export type tbl_img_extAvgOrderByAggregateInput = {
    views?: SortOrder
    favorites?: SortOrder
    ratio?: SortOrder
  }

  export type tbl_img_extMaxOrderByAggregateInput = {
    id?: SortOrder
    views?: SortOrder
    favorites?: SortOrder
    ratio?: SortOrder
    tags?: SortOrder
    author_name?: SortOrder
    author_id?: SortOrder
    artist_name?: SortOrder
    artist_id?: SortOrder
    create_at?: SortOrder
    update_at?: SortOrder
  }

  export type tbl_img_extMinOrderByAggregateInput = {
    id?: SortOrder
    views?: SortOrder
    favorites?: SortOrder
    ratio?: SortOrder
    tags?: SortOrder
    author_name?: SortOrder
    author_id?: SortOrder
    artist_name?: SortOrder
    artist_id?: SortOrder
    create_at?: SortOrder
    update_at?: SortOrder
  }

  export type tbl_img_extSumOrderByAggregateInput = {
    views?: SortOrder
    favorites?: SortOrder
    ratio?: SortOrder
  }

  export type DecimalWithAggregatesFilter = {
    equals?: Decimal | number | string
    in?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | number | string
    lte?: Decimal | number | string
    gt?: Decimal | number | string
    gte?: Decimal | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type tbl_authorCountOrderByAggregateInput = {
    name?: SortOrder
    id?: SortOrder
    desc?: SortOrder
    type?: SortOrder
    create_at?: SortOrder
    update_at?: SortOrder
  }

  export type tbl_authorMaxOrderByAggregateInput = {
    name?: SortOrder
    id?: SortOrder
    desc?: SortOrder
    type?: SortOrder
    create_at?: SortOrder
    update_at?: SortOrder
  }

  export type tbl_authorMinOrderByAggregateInput = {
    name?: SortOrder
    id?: SortOrder
    desc?: SortOrder
    type?: SortOrder
    create_at?: SortOrder
    update_at?: SortOrder
  }

  export type tbl_tagCountOrderByAggregateInput = {
    name?: SortOrder
    alias?: SortOrder
    id?: SortOrder
    category_id?: SortOrder
    category?: SortOrder
    create_at?: SortOrder
    update_at?: SortOrder
  }

  export type tbl_tagMaxOrderByAggregateInput = {
    name?: SortOrder
    alias?: SortOrder
    id?: SortOrder
    category_id?: SortOrder
    category?: SortOrder
    create_at?: SortOrder
    update_at?: SortOrder
  }

  export type tbl_tagMinOrderByAggregateInput = {
    name?: SortOrder
    alias?: SortOrder
    id?: SortOrder
    category_id?: SortOrder
    category?: SortOrder
    create_at?: SortOrder
    update_at?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | number | string
    increment?: Decimal | number | string
    decrement?: Decimal | number | string
    multiply?: Decimal | number | string
    divide?: Decimal | number | string
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedDecimalFilter = {
    equals?: Decimal | number | string
    in?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | number | string
    lte?: Decimal | number | string
    gt?: Decimal | number | string
    gte?: Decimal | number | string
    not?: NestedDecimalFilter | Decimal | number | string
  }

  export type NestedDecimalWithAggregatesFilter = {
    equals?: Decimal | number | string
    in?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | number | string
    lte?: Decimal | number | string
    gt?: Decimal | number | string
    gte?: Decimal | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}